These are notes on how to build [[OpenAFS]] from source code. Note that [[OpenAFS]] pre-built binaries are available on the [[OpenAFS]] site and are available as prebuilt packages for many platforms. These instructions may be useful for you if you need to build [[OpenAFS]] from source.

### <a name="Requirements"></a> Requirements

#### <a name="Tools"></a> Tools

- Git
- autoconf
- automake
- perl 5.6
- make
- compiler/linker (e.g. gcc tool chain)
- lex/yacc (flex/bison)

#### <a name="Libraries"></a> Libraries

- libc
- kerberos, optional, but recommended
- ncurses
- kernel headers

The required packages to build [[OpenAFS]] on Debian-based linux distributions can be installed with,

      apt-get install git-core autoconf automake make gcc flex bison
      apt-get install libc6-dev libkrb5-dev libncurses5-dev linux-headers-$(uname -r)

On RPM based linux distributions, the packages required are,

     yum install gcc autoconf automake make flex bison rpm-build
     yum install glibc-devel krb5-devel ncurses-devel pam-devel kernel-devel-$(uname -r)

### <a name="Getting the Source Code"></a> Getting the Source Code

Snapshots of the [[OpenAFS]] source code is made available for each stable and each development release at <http://openafs.org>.

The [[OpenAFS]] code base is now available from a Git repository. See [[GitDevelopers]] for more information.

### <a name="Building the Binaries"></a> Building the Binaries

#### <a name="Modern Paths"></a> Modern Paths

To build [[OpenAFS]] with Kerberos 5 support, and with a custom install path. Be sure to run ./regen.sh to generate the configure script.

       cd openafs-stable-1_4_x.
       ./regen.sh
       ./configure --prefix=/usr/local/openafs --with-krb5-conf=(full path to krb5-config script)
       make
       sudo make install

#### <a name="Transarc Paths"></a> Transarc Paths

By convention, [[OpenAFS]] server binaries and related files are located in /usr/afs, and client binaries and related files are located in /usr/vice. These are known as Transarc paths, so called because that is is the convention used by Transarc, the company that first commercialized AFS. To build with the Transarc paths, specify --enable-transarc-paths as a configure option.

There are a couple of side effects that you need need to be aware of when building with the --enable-transarc-paths mode. First of all, the typical make install target does not work in this mode. Instead the 'make dest' target is used to build a directory of the binaries to be copied to the target system. Secondly, the packaging targets are not executed, so for example the redhat spec file is not generated to build the rpms.

To build with Keberos support (recommended), you'll need to have the Keberos development libraries, and if available for your platform, the krb5-config. You will need the full path the the krb5-config script. For example

       $ which krb5-config
       /usr/bin/krb5-config

To build [[OpenAFS]] with Kerberos 5 support and the Transarc path conventions:

       ./configure  --enable-transarc-paths --with-krb5-conf=/usr/bin/krb5-config
       make
       make dest

If all goes well, then the binaries are located in a platform sub-directory, the name of which is platform specific, for example 'i386\_linux26/dest'.

The 'make install' command does not work with Transarc paths. You will have to manually copy the binaries into place after running make dest. For more information, see the Quick Start Guide for Unix on the [[OpenAFS]] documentation page.

      # cp -r i386_linux26/dest/root.client/usr/vice/etc/modload /usr/vice/etc
      # cp i386_linux26/dest/root.client/usr/vice/etc/afsd /usr/vice/etc
      # cp -r i386_linux26/dest/bin /usr/afsws
      # cp -r i386_linux26/dest/etc /usr/afsws
      # cp -r i386_linux26/dest/include /usr/afsws
      # cp -r i386_linux26/dest/lib /usr/afsws
      # cp -r i386_linux26/dest/root.server/usr/afs/* /usr/afs

#### <a name="Building RPMs"></a> Building RPMs

The makesrpm.pl script, available in the directory src/packaging/RedHat, is used to build [[OpenAFS]] rpm packages. First build a srpm file using makesrpm.pl, then run rpmbuild to build and package the binaries. makesrpm.pl builds a srpm from the source and document tar files,

    makesrpm.pl openafs-<version>-src.tar.bz2 openafs-<version>-doc.tar.bz2

This will create the srpm file openafs-.src.rpm. Use rpmbuld with the --rebuild option, which will run configure and then make to build the binaries, and create the rpm files. The rpm files will be placed into /usr/src/redhat/

    rpmbuild --rebuild openafs-<version>.src.rpm

### <a name="Running the Test Suite"></a> Running the Test Suite

[[OpenAFS]] includes a suite of basic test scripts in the src/tests directory. The tests directory also contains a utility called afs-newcell.pl to create a test cell on a single host. You will need to already have a kerberos server running with an AFS principal and an admin principal. You should also have a partitions mounted as /vicepa and /vicepb for the test volumes. See the src/tests/afs-newcell.pl for details.

The paths to the binaries and AFS configuration is are written to src/tests/OpenAFS/Dirpaths.pm when the tests are built. This means you must run 'make all' in src/tests before attempting to use afs-newcell.pl. The afs-newcell.pl program must be run as root.

      cd src/tests
      make all
      sudo perl afs-newcell.pl

The afs-newcell.pl program will prompt for the required cell configuration unless started with the --batch options. You will need to specify the name of your new cell, the host name of this machine, the target partition id (a for /vicepa), and the username of the AFS administrator (which must be named 'admin' for the current pts tests).

You will also need to provide the type of Kerberos server, the name of the Kerberos realm (which can be different than the AFS cell name), and the location of the keytab file that contains the AFS server encryption key and the admin's encryption key. Finally, you may provide any server options for the AFS database and fileservers.

    Server options:
    What server name should be used? [host.domain.com]
    What cellname should be used? [testcell]
    What vice partition? [a]
    What administrator username? [admin]

    Kerberos options:
    Which Kerberos is to be used? [MIT]
    What Kerberos realm? [TESTCELL]
    What keytab file? [/usr/afs/etc/krb5.keytab]

    Database Server options:
    ptserver options: []
    vlserver options: []

    Fileserver options:
    Use DAFS fileserver (requires DAFS build option)? (yes/no) [no]
    fileserver options: []
    volserver options: []
    salvageserver options: []
    salvager options: []

The parameters are optionally saved to a script called run-afs-newcell.sh, in case you need to re-run the setup. Also, the Kerberos parameters for the new cell are saved in the file run-tests.conf. If all goes well, the servers should be running and the client loaded. You should be able to see your new cell at /afs/testcell (or whatever you called your cell). Your cell will have a few, empty test volumes that you should be able to see with a vos listvldb.

Run the run-tests script to run the AFS test suite. The program can be run as an ordinary user. The keytab file specified when afs-newcell was run will be used to authenticate the admin user for the tests.

      ./run-tests -all

The output will look something like this,

    Authenticating to cell testcell.
    ...
    Running creat1
    Running mkdir1
    Running mkdir2
    ....
    -----------------------------------------------------------
    Failed test(s) were:  write-large write-ro ...

-- [[MichaelMeffie]] - 26 Mar 2008
