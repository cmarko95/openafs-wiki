These are notes on how to build [[OpenAFS]] from source code. Note that [[OpenAFS]] pre-built binaries are available on the [[OpenAFS]] site and are available as prebuilt packages for many platforms. These instructions may be useful for you if you need to build [[OpenAFS]] from source.

### <a name="Requirements"></a> Requirements

#### <a name="Tools"></a> Tools

- Git
- autoconf
- automake
- perl 5.6
- make
- compiler/linker (e.g. gcc tool chain)
- lex/yacc (flex/bison)

#### <a name="Libraries"></a> Libraries

- libc
- kerberos, optional, but recommended
- ncurses
- pam
- kernel headers

The required packages to build [[OpenAFS]] on Debian-based linux distributions can be installed with,

      apt-get install git-core autoconf automake make gcc flex bison
      apt-get install libc6-dev libkrb5-dev libncurses5-dev linux-headers-$(uname -r)

On RPM based linux distributions, the packages required are,

     yum install gcc autoconf automake make flex bison rpm-build
     yum install glibc-devel krb5-devel ncurses-devel pam-devel kernel-devel-$(uname -r)

### <a name="Getting the Source Code"></a> Getting the Source Code

Snapshots of the [[OpenAFS]] source code is made available for each stable and each development release at <http://openafs.org>.

The [[OpenAFS]] code base is now available from a Git repository. See [[GitDevelopers]] for more information.

### <a name="Building the Binaries"></a> Building the Binaries

#### <a name="Modern Paths"></a> Modern Paths

To build [[OpenAFS]] with Kerberos 5 support, and with a custom install path. Be sure to run ./regen.sh to generate the configure script.

       cd openafs-stable-1_4_x.
       ./regen.sh
       ./configure --prefix=/usr/local/openafs --with-krb5-conf=(full path to krb5-config script) --with-linux-kernel-headers=(full path to desired kernel headers)
       make
       sudo make install

#### <a name="Transarc Paths"></a> Transarc Paths

By convention, [[OpenAFS]] server binaries and related files are located in /usr/afs, and client binaries and related files are located in /usr/vice. These are known as Transarc paths, so called because that is is the convention used by Transarc, the company that first commercialized AFS. To build with the Transarc paths, specify --enable-transarc-paths as a configure option.

There are a couple of side effects that you need need to be aware of when building with the --enable-transarc-paths mode. First of all, the typical make install target does not work in this mode. Instead the 'make dest' target is used to build a directory of the binaries to be copied to the target system. Secondly, the packaging targets are not executed, so for example the redhat spec file is not generated to build the rpms.

To build with Keberos support (recommended), you'll need to have the Keberos development libraries, and if available for your platform, the krb5-config. You will need the full path the the krb5-config script. For example

       $ which krb5-config
       /usr/bin/krb5-config

To build [[OpenAFS]] with Kerberos 5 support and the Transarc path conventions:

       ./configure  --enable-transarc-paths --with-krb5-conf=/usr/bin/krb5-config
       make
       make dest

If all goes well, then the binaries are located in a platform sub-directory, the name of which is platform specific, for example 'i386\_linux26/dest'.

The 'make install' command does not work with Transarc paths. You will have to manually copy the binaries into place after running make dest. For more information, see the Quick Start Guide for Unix on the [[OpenAFS]] documentation page.

      # cp -r i386_linux26/dest/root.client/usr/vice/etc/modload /usr/vice/etc
      # cp i386_linux26/dest/root.client/usr/vice/etc/afsd /usr/vice/etc
      # cp -r i386_linux26/dest/bin /usr/afsws
      # cp -r i386_linux26/dest/etc /usr/afsws
      # cp -r i386_linux26/dest/include /usr/afsws
      # cp -r i386_linux26/dest/lib /usr/afsws
      # cp -r i386_linux26/dest/root.server/usr/afs/* /usr/afs

#### <a name="Building RPMs"></a> Building RPMs

The makesrpm.pl script, available in the directory src/packaging/RedHat, is used to build [[OpenAFS]] rpm packages. First build a srpm file using makesrpm.pl, then run rpmbuild to build and package the binaries. makesrpm.pl builds a srpm from the source and document tar files,

    makesrpm.pl openafs-<version>-src.tar.bz2 openafs-<version>-doc.tar.bz2

This will create the srpm file openafs-<version>.src.rpm. Use rpmbuld with the --rebuild option, which will run configure and then make to build the binaries, and create the rpm files. The rpm files will be placed into /usr/src/redhat/

    rpmbuild --rebuild openafs-<version>.src.rpm

#### If You are Working with a Git Clone and Would Like to Make Your Own tar.bz2 Files
Start by making sure the root directory of your openafs clone is named to match the version you have checked out.  For instance, if you have checked out openafs-stable-1_4_14 from git, then the directory should be named "openafs-1.4.14".

NOTE: If your have checked out a newer version of openafs (1.6), you may want to make sure that a .version file exists in the openafs root directory.  It simply holds a bit of text equivalent to the tag on your checkout.

Now tar and compress <afsroot> and <afsroot>/doc like so.

    tar -cvjf openafs-<version>-src.tar.bz2 <afsroot>
    tar -cvjf openafs-<version>-doc.tar.bz2 <afsroot>/doc

After that, you can run makesrpm.pl as stated above.

### <a name="Running the Test Suite"></a> [[Running the Test Suite]]

-- [[MichaelMeffie]] - 26 Mar 2008
