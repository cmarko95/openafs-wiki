# <a name="Package &lt;code&gt;TWiki::Net="></a> Package =TWiki::Net

Object that brokers access to network resources.

<div>
  <ul>
    <li><a href="#Package =TWiki::Net="> Package TWiki::Net</a><ul>
        <li><a href="#ObjectMethod <strong>getUrl</strong> ($protocol"> ObjectMethod getUrl <tt>($protocol,$host,$port,$url,$user,$pass) -&gt; $text</tt></a></li>
        <li><a href="#set_MailHandler( \fn )"> setMailHandler( \&amp;fn )</a></li>
        <li><a href="#ObjectMethod <strong>sendEmail</strong> ($text,"> ObjectMethod sendEmail <tt>($text,$retries) -&gt; $error</tt></a></li>
      </ul>
    </li>
  </ul>
</div>

## <a name="ObjectMethod &lt;strong&gt;getUrl&lt;/strong&gt; ($protocol"></a> [[ObjectMethod]] **getUrl** `($protocol,$host,$port,$url,$user,$pass) -> $text`

Get the text at the other end of a URL

## <a name="set_MailHandler( \fn )"></a> setMailHandler( \\&amp;fn )

- `\&fn` - reference to a function($) (see \_sendEmailBySendmail for proto)

Install a handler function to take over mail sending from the default SMTP or sendmail methods. This is provided mainly for tests that need to be told when a mail is sent, without actually sending it. It may also be useful in the event that someone needs to plug in an alternative mail handling method.

## <a name="ObjectMethod &lt;strong&gt;sendEmail&lt;/strong&gt; ($text,"></a> [[ObjectMethod]] **sendEmail** `($text,$retries) -> $error`

- `$text` - text of the mail, including MIME headers
- `$retries` - number of times to retry the send (default 1)

Send an email specified as MIME format content. Date: ...\\nFrom: ...\\nTo: ...\\nCC: ...\\nSubject: ...\\n\\nMailBody...
