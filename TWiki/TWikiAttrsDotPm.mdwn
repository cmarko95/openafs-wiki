# <a name="Package &lt;code&gt;TWiki::Attrs="></a> Package =TWiki::Attrs

Class of attribute sets, designed for parsing and storing attribute values from a TWiki tag e.g. `%TAG{"joe" fred="bad" joe="mad"}%`

An attribute set is a hash containing an entry for each parameter. The default parameter (unnamed quoted string) is named `_DEFAULT` in the hash.

Attributes declared later in the string will override those of the same name defined earlier. The one exception to this is the \_DEFAULT key, where the _first_ instance is always taken.

As well as the default TWiki syntax (parameter values double-quoted) this class also parses single-quoted values, unquoted spaceless values, spaces around the =, and commas as well as spaces separating values. The extended syntax has to be enabled by passing the `$friendly` parameter to `new`.

<div>
  <ul>
    <li><a href="#Package =TWiki::Attrs="> Package TWiki::Attrs</a><ul>
        <li><a href="#ClassMethod <strong>new</strong> ($string,$frie"> ClassMethod new <tt>($string,$friendly)=&gt;\%attrsObjectRef</tt></a></li>
        <li><a href="#ObjectMethod <strong>isEmpty</strong> () -> boo"> ObjectMethod isEmpty <tt>() -&gt; boolean</tt></a></li>
        <li><a href="#ObjectMethod <strong>remove</strong> ($key) ->"> ObjectMethod remove <tt>($key) -&gt; $value</tt></a></li>
        <li><a href="#ObjectMethod <strong>stringify</strong> () -> $"> ObjectMethod stringify <tt>() -&gt; $string</tt></a></li>
      </ul>
    </li>
  </ul>
</div>

## <a name="ClassMethod &lt;strong&gt;new&lt;/strong&gt; ($string,$frie"></a> [[ClassMethod]] **new** `($string,$friendly)=>\%attrsObjectRef`

- `$string` - String containing attribute specification
- `$friendly` - if true, the parse will be according to the extended syntax pioneered by the original Contrib::Attrs. Otherwise it will be strict as per traditional TWiki syntax.

Parse a standard attribute string containing name=value pairs and create a new attributes object. The value may be a word or a quoted string. If there is an error during parsing, the parse will complete but $attrs-&gt;\{\_ERROR\} will be set in the new object. $attrs-&gt;\{\_RAW\} will always contain the full unprocessed $string.

Extended syntax example:

    my $attrs = new TWiki::Attrs('the="time \\"has come", "the walrus" said to=speak of=\'many \\'things\', 1);

In this example:

- `the` will be `time "has come`
- `__default__` will be `the walrus`
- `said` will be `on`
- `to` will be `speak`
- `of` will be `many 'things`

Only " and ' are escaped.

Traditional syntax is as old TWiki, except that the whole string is parsed (the old parser would only recognise default values in position 1, nowhere else)

## <a name="ObjectMethod &lt;strong&gt;isEmpty&lt;/strong&gt; () - bool"></a> [[ObjectMethod]] **isEmpty** `() -> boolean`

Return false if attribute set is not empty.

## <a name="ObjectMethod &lt;strong&gt;remove&lt;/strong&gt; ($key) - $"></a> [[ObjectMethod]] **remove** `($key) -> $value`

- `$key` - Attribute to remove

Remove an attr value from the map, return old value. After a call to `remove` the attribute is no longer defined.

## <a name="ObjectMethod &lt;strong&gt;stringify&lt;/strong&gt; () - $s"></a> [[ObjectMethod]] **stringify** `() -> $string`

Generate a printed form for the map, using strict attribute syntax, with only the single-quote extension syntax observed (no \{\} brackets, though).
