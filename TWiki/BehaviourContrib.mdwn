# <a name="Behaviour Javascript framework C"></a><a name=" Behaviour Javascript framework "></a> Behaviour Javascript framework Contrib

This contrib packages the third-party `Behaviour` Javascript event library, available from <http://bennolan.com/behaviour/>.

Behaviour is suited to create javascript based interaction that degrades well when javascript is not available.

Javascript file: [behaviour.js](http://www.dementia.org/twiki//view/TWiki/%TOPIC%/behaviour.js) (8.1K). The [compressed javascript file](http://www.dementia.org/twiki//view/TWiki/%TOPIC%/behaviour.compressed.js) (2.9K) has been processed by [ShrinkSafe](http://alex.dojotoolkit.org/shrinksafe/).

<div><span>On this page:</span><ul>
    <li><a href="#Introduction"> Introduction</a></li>
    <li><a href="#Usage"> Usage</a></li>
    <li><a href="#Example"> Example</a></li>
    <li><a href="#Development"> Development</a></li>
    <li><a href="#License"> License</a></li>
    <li><a href="#Links"> Links</a></li>
    <li><a href="#Contrib Info"> Contrib Info</a></li>
  </ul>
</div>

## <a name="Introduction"></a> Introduction

From the website:

> After all the work of WASP and others to promote clean markup, valid pages and graceful degradation via css - it sucks that we're going back to tag soup days by throwing javascript tags into our html.
>
> The better way to do javascript is to do it unobtrusively. PPK and Simon Willison have been recommending this approach for ages. And it's definitely the way to go. The only problem is that it's a bit of a pain in the ass.
>
> That's why I came up with Behaviour - my solution to unobtrusive javascript behaviours.
>
> **How does it work?**
>
> Behaviour lets you use CSS selectors to specify elements to add javascript events to. This means that instead of writing:
>
>     <li>
>        <a onclick="this.parentNode.removeChild(this)" href="#">
>           Click me to delete me
>        </a>
>     </li>
>
> You can use:
>
>     <ul id="example">
>        <li>
>           <a href="/someurl">Click me to delete me</a>
>        </li>
>     </ul>
>
> And then use css selectors to select that element and add javascript functions to it.
>
>     var myrules = {
>        '#example li' : function(el){
>           el.onclick = function(){
>              this.parentNode.removeChild(this);
>
>           }
>        }
>     };
>
>     Behaviour.register(myrules);

## <a name="Usage"></a> Usage

Include the javascript file:

> <script type="text/javascript" src="%PUBURL%/%TWIKIWEB%/BehaviourContrib/behaviour.compressed.js"></script>

In your code you create a "rules" object, with sub-objects for each html element class name or id:

> var myrules = {
>        '.classname' : function(element) {
>           // element event
>           element.onclick = function() {
>              // code here
>           }
>        },
>
>        '#id' : function(element) {
>           // element event
>           element.onclick = function() {
>              // code here
>           }
>        }
>     };
>
> Or use nested identifiers:
>
>     var myrules = {
>        '.menu li a' : function(element) {
>           element.onclick = function() {
>              // code here
>           }
>        }
>     };

Apply the rules with:

> Behaviour.register(myrules);

## <a name="Example"></a> Example

If we have a 'normal' link to TWiki Web hometopic: [[TWiki Web Home|TWiki/WebHome]], we can use javascript to make it open a popup window. When javascript is not available the link behaviour defaults to opening the page in the current window.

> <span class="link%TWIKIWEB%%HOMETOPIC%">[[%TWIKIWEB%.%HOMETOPIC%][TWiki Web Home]]</span>
>
>     <script type="text/javascript">
>     // <![CDATA[
>     var myrules = {
>        '.link%TWIKIWEB%%HOMETOPIC% a' : function(el){
>           el.onclick = function() {
>              // open in a popup with no other attributes than template 'viewplain'
>              launchTheWindow(this.href,null,null,null,"viewplain");
>              return false;
>           }
>        }
>     };
>
>     Behaviour.register(myrules);
>     // ]]>
>     </script>
>
> The class name `link%TWIKIWEB%%HOMETOPIC%` will get expanded to `linkTWikiWebHome`

Creates:

<span>[[TWiki Web Home|TWiki/WebHome]]</span>

## <a name="Development"></a> Development

- [Google Groups: Behaviour Javascript Library](http://groups.google.com/group/behaviour)
- [Dean Edwards: Faster DOM Queries](http://dean.edwards.name/weblog/2006/03/faster/) - with a speed-up hack to Behaviour

## <a name="License"></a> License

Behaviour is freely distributable under the terms of an BSD license. For details, see the Behaviour website.

## <a name="Links"></a> Links

- [Behaviour website](http://bennolan.com/behaviour/)
- [Behaviour Google Group](http://groups.google.com/group/behaviour)

## <a name="Contrib Info"></a> Contrib Info

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <td> Author: </td>
    <td> TWiki:Main.ArthurClemens </td>
  </tr>
  <tr>
    <td> Copyright: </td>
    <td> version 1.1 - Copyright (c) Ben Nolan and Simon Willison </td>
  </tr>
  <tr>
    <td> License: </td>
    <td> BSD </td>
  </tr>
  <tr>
    <td> Dependencies: </td>
    <td> None </td>
  </tr>
  <tr>
    <td> 4 June 2006 </td>
    <td> 1.000 First Version. Included Behaviour version: 1.1 </td>
  </tr>
  <tr>
    <td align="right"> Home: </td>
    <td><a href="http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%" target="_top">http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%</a></td>
  </tr>
  <tr>
    <td align="right"> Feedback: </td>
    <td><a href="http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Dev" target="_top">http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Dev</a></td>
  </tr>
  <tr>
    <td align="right"> Appraisal: </td>
    <td><a href="http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Appraisal" target="_top">http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Appraisal</a></td>
  </tr>
</table>

**_Related Topics:_** [[TWikiPreferences]]
