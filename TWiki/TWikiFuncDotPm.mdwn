# <a name="Package &lt;code&gt;TWiki::Func="></a> Package =TWiki::Func

_Official list of stable TWiki functions for Plugin developers_

This module defines official functions that [[Plugins|TWiki/TWikiPlugins]] can use to interact with the TWiki engine and content.

Refer to [[EmptyPlugin]] and lib/TWiki/Plugins/EmptyPlugin.pm for a template Plugin and documentation on how to write a Plugin.

Plugins should **only** use functions published in this module. If you use functions in other TWiki libraries you might create a security hole and you will probably need to change your Plugin when you upgrade TWiki.

Deprecated functions will still work in older code, though they should _not_ be called in new Plugins and should be replaced in older Plugins as soon as possible.

The version of the TWiki::Func module is defined by the VERSION number of the TWiki::Plugins module, currently 1.11. This can be shown by the `%PLUGINVERSION%` variable. The 'Since' field in the function documentation refers to the VERSION number and the date that the function was addded.

**_Note:_** Beware! These methods should only ever be called from the context of a TWiki Plugin. They require a Plugins SESSION context to be established before they are called, and will not work if simply called from another TWiki module. For example,

    use TWiki;
    print TWiki::Func::getSkin(),"\n";

will fail with `Can't call method "getSkin" on an undefined value at TWiki/Func.pm line 83`.

If you want to call the methods outside the context of a plugin, you can create a Plugins SESSION object. For example, the script:

    use TWiki:
    $TWiki::Plugins::SESSION = new TWiki();
    print TWiki::Func::getSkin(),"\n";

will work happily.

<div>
  <ul>
    <li><a href="#Package =TWiki::Func="> Package TWiki::Func</a><ul>
        <li><a href="#Environment"> Environment</a><ul>
            <li><a href="#getSkin( ) -> $skin"> getSkin( ) -&gt; $skin</a></li>
            <li><a href="#get_UrlHost( ) -> $host"> getUrlHost( ) -&gt; $host</a></li>
            <li><a href="#get_ScriptUrl( $web, $topic, $sc"> getScriptUrl( $web, $topic, $script, ... ) -&gt; $url</a></li>
            <li><a href="#get_ViewUrl( $web, $topic ) -> $"> getViewUrl( $web, $topic ) -&gt; $url</a></li>
            <li><a href="#get_OopsUrl( $web, $topic, $temp"> getOopsUrl( $web, $topic, $template, $param1, $param2, $param3, $param4 ) -&gt; $url</a></li>
            <li><a href="#get_PubUrlPath( ) -> $path"> getPubUrlPath( ) -&gt; $path</a></li>
            <li><a href="#get_CgiQuery( ) -> $query"> getCgiQuery( ) -&gt; $query</a></li>
            <li><a href="#get_SessionValue( $key ) -> $val"> getSessionValue( $key ) -&gt; $value</a></li>
            <li><a href="#set_SessionValue( $key, $value )"> setSessionValue( $key, $value ) -&gt; $boolean</a></li>
            <li><a href="#clear_SessionValue( $key ) -> $b"> clearSessionValue( $key ) -&gt; $boolean</a></li>
            <li><a href="#getContext() -> \%hash"> getContext() -&gt; \%hash</a></li>
          </ul>
        </li>
        <li><a href="#Preferences"> Preferences</a><ul>
            <li><a href="#get_PreferencesValue( $key, $web"> getPreferencesValue( $key, $web ) -&gt; $value</a></li>
            <li><a href="#get_PluginPreferencesValue( $key"> getPluginPreferencesValue( $key ) -&gt; $value</a></li>
            <li><a href="#get_PreferencesFlag( $key, $web"> getPreferencesFlag( $key, $web ) -&gt; $value</a></li>
            <li><a href="#get_PluginPreferencesFlag( $key"> getPluginPreferencesFlag( $key ) -&gt; $boolean</a></li>
            <li><a href="#get_WikiToolName( ) -> $name"> getWikiToolName( ) -&gt; $name</a></li>
            <li><a href="#get_MainWebname( ) -> $name"> getMainWebname( ) -&gt; $name</a></li>
            <li><a href="#get_TwikiWebname( ) -> $name"> getTwikiWebname( ) -&gt; $name</a></li>
          </ul>
        </li>
        <li><a href="#User Handling and Access Control"> User Handling and Access Control</a><ul>
            <li><a href="#get_DefaultUserName( ) -> $login"> getDefaultUserName( ) -&gt; $loginName</a></li>
            <li><a href="#get_WikiName( ) -> $wikiName"> getWikiName( ) -&gt; $wikiName</a></li>
            <li><a href="#get_WikiUserName( ) -> $wikiName"> getWikiUserName( ) -&gt; $wikiName</a></li>
            <li><a href="#wiki_ToUserName( $wikiName ) ->"> wikiToUserName( $wikiName ) -&gt; $loginName</a></li>
            <li><a href="#user_ToWikiName( $loginName, $do"> userToWikiName( $loginName, $dontAddWeb ) -&gt; $wikiName</a></li>
            <li><a href="#isGuest( ) -> $boolean"> isGuest( ) -&gt; $boolean</a></li>
            <li><a href="#permissionsSet( $web ) -> $boole"> permissionsSet( $web ) -&gt; $boolean</a></li>
            <li><a href="#check_AccessPermission( $type, $"> checkAccessPermission( $type, $wikiName, $text, $topic, $web, $meta ) -&gt; $boolean</a></li>
          </ul>
        </li>
        <li><a href="#Webs, Topics and Attachments"> Webs, Topics and Attachments</a><ul>
            <li><a href="#get_ListOfWebs( $filter ) -> @we"> getListOfWebs( $filter ) -&gt; @webs</a></li>
            <li><a href="#webExists( $web ) -> $boolean"> webExists( $web ) -&gt; $boolean</a></li>
            <li><a href="#createWeb( $newWeb, $baseWeb, $o"> createWeb( $newWeb, $baseWeb, $opts )</a></li>
            <li><a href="#moveWeb( $oldName, $newName )"> moveWeb( $oldName, $newName )</a></li>
            <li><a href="#get_TopicList( $web ) -> @topics"> getTopicList( $web ) -&gt; @topics</a></li>
            <li><a href="#topicExists( $web, $topic ) -> $"> topicExists( $web, $topic ) -&gt; $boolean</a></li>
            <li><a href="#check_TopicEditLock( $web, $topi"> checkTopicEditLock( $web, $topic, $script ) -&gt; ( $oopsUrl, $loginName, $unlockTime )</a></li>
            <li><a href="#set_TopicEditLock( $web, $topic,"> setTopicEditLock( $web, $topic, $lock )</a></li>
            <li><a href="#saveTopic( $web, $topic, $meta,"> saveTopic( $web, $topic, $meta, $text, $options ) -&gt; $error</a></li>
            <li><a href="#save_TopicText( $web, $topic, $t"> saveTopicText( $web, $topic, $text, $ignorePermissions, $dontNotify ) -&gt; $oopsUrl</a></li>
            <li><a href="#moveTopic( $web, $topic, $newWeb"> moveTopic( $web, $topic, $newWeb, $newTopic )</a></li>
            <li><a href="#get_RevisionInfo($web, $topic, $"> getRevisionInfo($web, $topic, $rev, $attachment ) -&gt; ( $date, $user, $rev, $comment ) </a></li>
            <li><a href="#get_RevisionAtTime( $web, $topic"> getRevisionAtTime( $web, $topic, $time ) -&gt; $rev</a></li>
            <li><a href="#readTopic( $web, $topic, $rev )"> readTopic( $web, $topic, $rev ) -&gt; ( $meta, $text )</a></li>
            <li><a href="#read_TopicText( $web, $topic, $r"> readTopicText( $web, $topic, $rev, $ignorePermissions ) -&gt; $text</a></li>
            <li><a href="#attachmentExists( $web, $topic,"> attachmentExists( $web, $topic, $attachment ) -&gt; $boolean</a></li>
            <li><a href="#readAttachment( $web, $topic, $n"> readAttachment( $web, $topic, $name, $rev ) -&gt; $data</a></li>
            <li><a href="#saveAttachment( $web, $topic, $a"> saveAttachment( $web, $topic, $attachment, $opts )</a></li>
            <li><a href="#moveAttachment( $web, $topic, $a"> moveAttachment( $web, $topic, $attachment, $newWeb, $newTopic, $newAttachment )</a></li>
          </ul>
        </li>
        <li><a href="#Assembling Pages"> Assembling Pages</a><ul>
            <li><a href="#readTemplate( $name, $skin ) ->"> readTemplate( $name, $skin ) -&gt; $text</a></li>
            <li><a href="#loadTemplate ( $name, $skin, $we"> loadTemplate ( $name, $skin, $web ) -&gt; $text</a></li>
            <li><a href="#expandTemplate( $def  ) -> $stri"> expandTemplate( $def ) -&gt; $string</a></li>
            <li><a href="#writeHeader( $query, $contentLen"> writeHeader( $query, $contentLength )</a></li>
            <li><a href="#redirect_CgiQuery( $query, $url,"> redirectCgiQuery( $query, $url, $passthru )</a></li>
            <li><a href="#add_ToHEAD( $id, $header )"> addToHEAD( $id, $header )</a></li>
            <li><a href="#expand_CommonVariables( $text, $"> expandCommonVariables( $text, $topic, $web ) -&gt; $text</a></li>
            <li><a href="#renderText( $text, $web ) -> $te"> renderText( $text, $web ) -&gt; $text</a></li>
            <li><a href="#internalLink( $pre, $web, $topic"> internalLink( $pre, $web, $topic, $label, $anchor, $createLink ) -&gt; $text</a></li>
          </ul>
        </li>
        <li><a href="#E-mail"> E-mail</a><ul>
            <li><a href="#sendEmail ( $text, $retries ) ->"> sendEmail ( $text, $retries ) -&gt; $error</a></li>
            <li><a href="#wiki_ToEmail( $wikiName ) -> $em"> wikiToEmail( $wikiName ) -&gt; $email</a></li>
          </ul>
        </li>
        <li><a href="#Creating New Topics"> Creating New Topics</a><ul>
            <li><a href="#expand_VariablesOnTopicCreation"> expandVariablesOnTopicCreation ( $text ) -&gt; $text</a></li>
          </ul>
        </li>
        <li><a href="#Special handlers"> Special handlers</a><ul>
            <li><a href="#register_TagHandler( $var, \fn,"> registerTagHandler( $var, \&amp;fn, $syntax )</a></li>
            <li><a href="#registerRESTHandler( $alias, \fn"> registerRESTHandler( $alias, \&amp;fn, )</a></li>
          </ul>
        </li>
        <li><a href="#Searching"> Searching</a><ul>
            <li><a href="#search_InWebContent($searchStrin"> searchInWebContent($searchString, $web, \@topics, \%options ) -&gt; \%map</a></li>
          </ul>
        </li>
        <li><a href="#Plugin-specific file handling"> Plugin-specific file handling</a><ul>
            <li><a href="#get_WorkArea( $pluginName ) -> $"> getWorkArea( $pluginName ) -&gt; $directorypath</a></li>
            <li><a href="#readFile( $filename ) -> $text"> readFile( $filename ) -&gt; $text</a></li>
            <li><a href="#saveFile( $filename, $text )"> saveFile( $filename, $text )</a></li>
          </ul>
        </li>
        <li><a href="#General Utilities"> General Utilities</a><ul>
            <li><a href="#get_RegularExpression( $name ) -"> getRegularExpression( $name ) -&gt; $expr</a></li>
            <li><a href="#normalize_WebTopicName($web, $to"> normalizeWebTopicName($web, $topic) -&gt; ($web, $topic)</a></li>
            <li><a href="#writeWarning( $text )"> writeWarning( $text )</a></li>
            <li><a href="#writeDebug( $text )"> writeDebug( $text )</a></li>
            <li><a href="#formatTime( $time, $format, $tim"> formatTime( $time, $format, $timezone ) -&gt; $text</a></li>
            <li><a href="#is_ValidWikiWord ( $text ) -> $b"> isValidWikiWord ( $text ) -&gt; $boolean</a></li>
            <li><a href="#extractParameters($attr ) -> %pa"> extractParameters($attr ) -&gt; %params</a></li>
            <li><a href="#extract_NameValuePair( $attr, $n"> extractNameValuePair( $attr, $name ) -&gt; $value</a></li>
          </ul>
        </li>
        <li><a href="#Deprecated functions"> Deprecated functions</a><ul>
            <li><a href="#get_ScriptUrlPath( ) -> $path"> getScriptUrlPath( ) -&gt; $path</a></li>
            <li><a href="#get_PublicWebList( ) -> @webs"> getPublicWebList( ) -&gt; @webs</a></li>
            <li><a href="#format_GmTime( $time, $format )"> formatGmTime( $time, $format ) -&gt; $text</a></li>
            <li><a href="#get_DataDir( ) -> $dir"> getDataDir( ) -&gt; $dir</a></li>
            <li><a href="#get_PubDir( ) -> $dir"> getPubDir( ) -&gt; $dir</a></li>
            <li><a href="#checkDependencies( $moduleName,"> checkDependencies( $moduleName, $dependenciesRef ) -&gt; $error</a></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</div>

## <a name="Environment"></a> Environment

### <a name="getSkin( ) - $skin"></a> getSkin( ) -&gt; $skin

Get the skin path, set by the `SKIN` and `COVER` preferences variables or the `skin` and `cover` CGI parameters

Return: `$skin` Comma-separated list of skins, e.g. `'gnu,tartan'`. Empty string if none.

**Since:** TWiki::Plugins::VERSION 1.000 (29 Jul 2001)

### <a name="get_UrlHost( ) - $host"></a> getUrlHost( ) -&gt; $host

Get protocol, domain and optional port of script URL

Return: `$host` URL host, e.g. `"http://example.com:80"`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="get_ScriptUrl( $web, $topic, $sc"></a> getScriptUrl( $web, $topic, $script, ... ) -&gt; $url

Compose fully qualified URL

- `$web` - Web name, e.g. `'Main'`
- `$topic` - Topic name, e.g. `'WebNotify'`
- `$script` - Script name, e.g. `'view'`
- `...` - an arbitrary number of name,value parameter pairs that will be url-encoded and added to the url. The special parameter name '#' is reserved for specifying an anchor. e.g. `getScriptUrl('x','y','view','#'=>'XXX',a=>1,b=>2)` will give `.../view/x/y?a=1&b=2#XXX`

Return: `$url` URL, e.g. `"http://example.com:80/cgi-bin/view.pl/Main/WebNotify"`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="get_ViewUrl( $web, $topic ) - $u"></a> getViewUrl( $web, $topic ) -&gt; $url

Compose fully qualified view URL

- `$web` - Web name, e.g. `'Main'`. The current web is taken if empty
- `$topic` - Topic name, e.g. `'WebNotify'`

Return: `$url` URL, e.g. `"http://example.com:80/cgi-bin/view.pl/Main/WebNotify"`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="get_OopsUrl( $web, $topic, $temp"></a> getOopsUrl( $web, $topic, $template, $param1, $param2, $param3, $param4 ) -&gt; $url

Compose fully qualified 'oops' dialog URL

- `$web` - Web name, e.g. `'Main'`. The current web is taken if empty
- `$topic` - Topic name, e.g. `'WebNotify'`
- `$template` - Oops template name, e.g. `'oopsmistake'`. The 'oops' is optional; 'mistake' will translate to 'oopsmistake'.
- `$param1` ... `$param4` - Parameter values for %PARAM1% ... %PARAMn% variables in template, optional

Return: `$url` URL, e.g. `"http://example.com:80/cgi-bin/oops.pl/ Main/WebNotify?template=oopslocked&param1=joe"`

This might be used like this:

       my $url = TWiki::Func::getOopsUrl($web, $topic, 'oopsmistake', 'I made a boo-boo');
       TWiki::Func::redirectCgiQuery( undef, $url );
       return 0;

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

Since TWiki::Plugins::VERSION 1.1, the recommended approach is to throw an [[oops exception|Main/TWikiOopsExceptionDotPm]].

       use Error qw( :try );

       throw TWiki::OopsException($web, $topic, undef, 0, [ 'I made a boo-boo' ]);

and let TWiki handle the cleanup.

### <a name="get_PubUrlPath( ) - $path"></a> getPubUrlPath( ) -&gt; $path

Get pub URL path

Return: `$path` URL path of pub directory, e.g. `"/pub"`

**Since:** TWiki::Plugins::VERSION 1.000 (14 Jul 2001)

### <a name="get_CgiQuery( ) - $query"></a> getCgiQuery( ) -&gt; $query

Get CGI query object. Important: Plugins cannot assume that scripts run under CGI, Plugins must always test if the CGI query object is set

Return: `$query` CGI query object; or 0 if script is called as a shell script

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="get_SessionValue( $key ) - $valu"></a> getSessionValue( $key ) -&gt; $value

Get a session value from the client session module

- `$key` - Session key

Return: `$value` Value associated with key; empty string if not set

**Since:** TWiki::Plugins::VERSION 1.000 (27 Feb 200)

### <a name="set_SessionValue( $key, $value )"></a> setSessionValue( $key, $value ) -&gt; $boolean

Set a session value.

- `$key` - Session key
- `$value` - Value associated with key

Return: true if function succeeded

**Since:** TWiki::Plugins::VERSION 1.000 (17 Aug 2001)

### <a name="clear_SessionValue( $key ) - $bo"></a> clearSessionValue( $key ) -&gt; $boolean

Clear a session value that was set using `setSessionValue`.

- `$key` - name of value stored in session to be cleared. Note that you **cannot** clear `AUTHUSER`.

Return: true if the session value was cleared

**Since:** TWiki::Plugins::VERSION 1.1

### <a name="getContext() - \%hash"></a> getContext() -&gt; \\%hash

Get a hash of context identifiers representing the currently active context.

The context is a set of identifiers that are set during specific phases of TWiki processing. For example, each of the standard scripts in the 'bin' directory each has a context identifier - the view script has 'view', the edit script has 'edit' etc. So you can easily tell what 'type' of script your Plugin is being called within. The core context identifiers are listed in the [[TWikiTemplates]] topic. Please be careful not to overwrite any of these identifiers!

Context identifiers can be used to communicate between Plugins, and between Plugins and templates. For example, in [[FirstPlugin]].pm, you might write:

    sub initPlugin {
       TWiki::Func::getContext()->{'MyID'} = 1;
       ...

This can be used in SecondPlugin.pm like this:

    sub initPlugin {
       if( TWiki::Func::getContext()->{'MyID'} ) {
          ...
       }
       ...

or in a template, like this:

    %TMPL:DEF{"ON"}% Not off %TMPL:END%
    %TMPL:DEF{"OFF"}% Not on %TMPL:END%
    %TMPL:P{context="MyID" then="ON" else="OFF"}%

or in a topic:

    %IF{"context MyID" then="MyID is ON" else="MyID is OFF"}%

**_Note_**: **all** plugins have an **automatically generated** context identifier if they are installed and initialised. For example, if the [[FirstPlugin]] is working, the context ID 'FirstPlugin' will be set.

**Since:** TWiki::Plugins::VERSION 1.1

## <a name="Preferences"></a> Preferences

### <a name="get_PreferencesValue( $key, $web"></a> getPreferencesValue( $key, $web ) -&gt; $value

Get a preferences value from TWiki or from a Plugin

- `$key` - Preferences key
- `$web` - Name of web, optional. Current web if not specified; does not apply to settings of Plugin topics

Return: `$value` Preferences value; empty string if not set

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

- Example for Plugin setting:
  - [[MyPlugin]] topic has: `* Set COLOR = red`
  - Use `"MYPLUGIN_COLOR"` for `$key`
  - `my $color = TWiki::Func::getPreferencesValue( "MYPLUGIN_COLOR" );`

- Example for preferences setting:
  - [[WebPreferences]] topic has: `* Set WEBBGCOLOR = #FFFFC0`
  - `my $webColor = TWiki::Func::getPreferencesValue( 'WEBBGCOLOR', 'Sandbox' );`

**NOTE:** As of TWiki4.1, if `$NO_PREFS_IN_TOPIC` is enabled in the plugin, then preferences set in the plugin topic will be ignored.

### <a name="get_PluginPreferencesValue( $key"></a> getPluginPreferencesValue( $key ) -&gt; $value

Get a preferences value from your Plugin

- `$key` - Plugin Preferences key w/o PLUGINNAME\_ prefix.

Return: `$value` Preferences value; empty string if not set

**_Note_**: This function will will **only** work when called from the Plugin.pm file itself. it **will not work** if called from a sub-package (e.g. TWiki::Plugins::MyPlugin::MyModule)

**Since:** TWiki::Plugins::VERSION 1.021 (27 Mar 2004)

**NOTE:** As of TWiki4.1, if `$NO_PREFS_IN_TOPIC` is enabled in the plugin, then preferences set in the plugin topic will be ignored.

### <a name="get_PreferencesFlag( $key, $web"></a><a name="get_PreferencesFlag( $key, $web "></a> getPreferencesFlag( $key, $web ) -&gt; $value

Get a preferences flag from TWiki or from a Plugin

- `$key` - Preferences key
- `$web` - Name of web, optional. Current web if not specified; does not apply to settings of Plugin topics

Return: `$value` Preferences flag `'1'` (if set), or `"0"` (for preferences values `"off"`, `"no"` and `"0"`)

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

- Example for Plugin setting:
  - [[MyPlugin]] topic has: `* Set SHOWHELP = off`
  - Use `"MYPLUGIN_SHOWHELP"` for `$key`
  - `my $showHelp = TWiki::Func::getPreferencesFlag( "MYPLUGIN_SHOWHELP" );`

**NOTE:** As of TWiki4.1, if `$NO_PREFS_IN_TOPIC` is enabled in the plugin, then preferences set in the plugin topic will be ignored.

### <a name="get_PluginPreferencesFlag( $key"></a><a name="get_PluginPreferencesFlag( $key "></a> getPluginPreferencesFlag( $key ) -&gt; $boolean

Get a preferences flag from your Plugin

- `$key` - Plugin Preferences key w/o PLUGINNAME\_ prefix.

Return: false for preferences values `"off"`, `"no"` and `"0"`, or values not set at all. True otherwise.

**_Note_**: This function will will **only** work when called from the Plugin.pm file itself. it **will not work** if called from a sub-package (e.g. TWiki::Plugins::MyPlugin::MyModule)

**Since:** TWiki::Plugins::VERSION 1.021 (27 Mar 2004)

**NOTE:** As of TWiki4.1, if `$NO_PREFS_IN_TOPIC` is enabled in the plugin, then preferences set in the plugin topic will be ignored.

### <a name="get_WikiToolName( ) - $name"></a> getWikiToolName( ) -&gt; $name

Get toolname as defined in TWiki.cfg

Return: `$name` Name of tool, e.g. `'TWiki'`

**Since:** TWiki::Plugins::VERSION 1.000 (27 Feb 2001)

### <a name="get_MainWebname( ) - $name"></a> getMainWebname( ) -&gt; $name

Get name of Main web as defined in TWiki.cfg

Return: `$name` Name, e.g. `'Main'`

**Since:** TWiki::Plugins::VERSION 1.000 (27 Feb 2001)

### <a name="get_TwikiWebname( ) - $name"></a> getTwikiWebname( ) -&gt; $name

Get name of TWiki documentation web as defined in TWiki.cfg

Return: `$name` Name, e.g. `'TWiki'`

**Since:** TWiki::Plugins::VERSION 1.000 (27 Feb 2001)

## <a name="User Handling and Access Control"></a> User Handling and Access Control

### <a name="get_DefaultUserName( ) - $loginN"></a> getDefaultUserName( ) -&gt; $loginName

Get default user name as defined in the configuration as `DefaultUserLogin`

Return: `$loginName` Default user name, e.g. `'guest'`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="get_WikiName( ) - $wikiName"></a> getWikiName( ) -&gt; $wikiName

Get Wiki name of logged in user

Return: `$wikiName` Wiki Name, e.g. `'JohnDoe'`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="get_WikiUserName( ) - $wikiName"></a> getWikiUserName( ) -&gt; $wikiName

Get Wiki name of logged in user with web prefix

Return: `$wikiName` Wiki Name, e.g. `"Main.JohnDoe"`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="wiki_ToUserName( $wikiName ) - $"></a> wikiToUserName( $wikiName ) -&gt; $loginName

Translate a Wiki name to a login name based on [[Main.TWikiUsers|Main/TWikiUsers]] topic

- `$wikiName` - Wiki name, e.g. `'Main.JohnDoe'` or `'JohnDoe'`

Return: `$loginName` Login name of user, e.g. `'jdoe'`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="user_ToWikiName( $loginName, $do"></a> userToWikiName( $loginName, $dontAddWeb ) -&gt; $wikiName

Translate a login name to a Wiki name based on [[Main.TWikiUsers|Main/TWikiUsers]] topic

- `$loginName` - Login name, e.g. `'jdoe'`
- `$dontAddWeb` - Do not add web prefix if `"1"`

Return: `$wikiName` Wiki name of user, e.g. `'Main.JohnDoe'` or `'JohnDoe'`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="isGuest( ) - $boolean"></a> isGuest( ) -&gt; $boolean

Test if logged in user is a guest ([[TWikiGuest]])

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="permissionsSet( $web ) - $boolea"></a> permissionsSet( $web ) -&gt; $boolean

Test if any access restrictions are set for this web, ignoring settings on individual pages

- `$web` - Web name, required, e.g. `'Sandbox'`

**Since:** TWiki::Plugins::VERSION 1.000 (27 Feb 2001)

### <a name="check_AccessPermission( $type, $"></a> checkAccessPermission( $type, $wikiName, $text, $topic, $web, $meta ) -&gt; $boolean

Check access permission for a topic based on the [[TWiki.TWikiAccessControl|TWiki/TWikiAccessControl]] rules

- `$type` - Access type, required, e.g. `'VIEW'`, `'CHANGE'`.
- `$wikiName` - [[WikiName]] of remote user, required, e.g. `"PeterThoeny"`. If `$wikiName` is '', 0 or `undef` then access is **always permitted**.
- `$text` - Topic text, optional. If 'perl false' (undef, 0 or ''), topic `$web.$topic` is consulted. `$text` may optionally contain embedded `%META:PREFERENCE` tags. Provide this parameter if:
  1. You are setting different access controls in the text to those defined in the stored topic,
  2. You already have the topic text in hand, and want to help TWiki avoid having to read it again,
  3. You are providing a `$meta` parameter.
- `$topic` - Topic name, required, e.g. `'PrivateStuff'`
- `$web` - Web name, required, e.g. `'Sandbox'`
- `$meta` - Meta-data object, as returned by `readTopic`. Optional. If `undef`, but `$text` is defined, then access controls will be parsed from `$text`. If defined, then metadata embedded in `$text` will be ignored. This parameter is always ignored if `$text` is undefined. Settings in `$meta` override `Set` settings in $text.

A perl true result indicates that access is permitted.

**Note** the wierd parameter order is due to compatibility constraints with earlier TWiki releases.

**Tip** if you want, you can use this method to check your own access control types. For example, if you:

- Set ALLOWTOPICSPIN = [[IncyWincy]]

in `ThatWeb.ThisTopic`, then a call to `checkAccessPermissions('SPIN', 'IncyWincy', undef, 'ThisTopic', 'ThatWeb', undef)` will return `true`.

**Since:** TWiki::Plugins::VERSION 1.000 (27 Feb 2001)

## <a name="Webs, Topics and Attachments"></a> Webs, Topics and Attachments

### <a name="get_ListOfWebs( $filter ) - @web"></a> getListOfWebs( $filter ) -&gt; @webs

- `$filter` - spec of web types to recover

Gets a list of webs, filtered according to the spec in the $filter, which may include one of:

1. 'user' (for only user webs)
2. 'template' (for only template webs i.e. those starting with "\_")

`$filter` may also contain the word 'public' which will further filter out webs that have NOSEARCHALL set on them. 'allowed' filters out webs the current user can't read.

For example, the deprecated getPublicWebList function can be duplicated as follows:

       my @webs = TWiki::Func::getListOfWebs( "user,public" );

**Since:** TWiki::Plugins::VERSION 1.1

### <a name="webExists( $web ) - $boolean"></a> webExists( $web ) -&gt; $boolean

Test if web exists

- `$web` - Web name, required, e.g. `'Sandbox'`

**Since:** TWiki::Plugins::VERSION 1.000 (14 Jul 2001)

### <a name="createWeb( $newWeb, $baseWeb, $o"></a> createWeb( $newWeb, $baseWeb, $opts )

- `$newWeb` is the name of the new web.
- `$baseWeb` is the name of an existing web (a template web). If the base web is a system web, all topics in it will be copied into the new web. If it is a normal web, only topics starting with 'Web' will be copied. If no base web is specified, an empty web (with no topics) will be created. If it is specified but does not exist, an error will be thrown.
- `$opts` is a ref to a hash that contains settings to be modified in

the web preferences topic in the new web.

    use Error qw( :try );
    use TWiki::AccessControlException;

    try {
        TWiki::Func::createWeb( "Newweb" );
    } catch Error::Simple with {
        my $e = shift;
        # see documentation on Error::Simple
    } catch TWiki::AccessControlException with {
        my $e = shift;
        # see documentation on TWiki::AccessControlException
    } otherwise {
        ...
    };

**Since:** TWiki::Plugins::VERSION 1.1

### <a name="moveWeb( $oldName, $newName )"></a> moveWeb( $oldName, $newName )

Move (rename) a web.

    use Error qw( :try );
    use TWiki::AccessControlException;

    try {
        TWiki::Func::moveWeb( "Oldweb", "Newweb" );
    } catch Error::Simple with {
        my $e = shift;
        # see documentation on Error::Simple
    } catch TWiki::AccessControlException with {
        my $e = shift;
        # see documentation on TWiki::AccessControlException
    } otherwise {
        ...
    };

To delete a web, move it to a subweb of `Trash`

    TWiki::Func::moveWeb( "Deadweb", "Trash.Deadweb" );

**Since:** TWiki::Plugins::VERSION 1.1

### <a name="get_TopicList( $web ) - @topics"></a> getTopicList( $web ) -&gt; @topics

Get list of all topics in a web

- `$web` - Web name, required, e.g. `'Sandbox'`

Return: `@topics` Topic list, e.g. `( 'WebChanges',  'WebHome', 'WebIndex', 'WebNotify' )`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="topicExists( $web, $topic ) - $b"></a> topicExists( $web, $topic ) -&gt; $boolean

Test if topic exists

- `$web` - Web name, optional, e.g. `'Main'`.
- `$topic` - Topic name, required, e.g. `'TokyoOffice'`, or `"Main.TokyoOffice"`

$web and $topic are parsed as described in the documentation for `normalizeWebTopicName`.

**Since:** TWiki::Plugins::VERSION 1.000 (14 Jul 2001)

### <a name="check_TopicEditLock( $web, $topi"></a> checkTopicEditLock( $web, $topic, $script ) -&gt; ( $oopsUrl, $loginName, $unlockTime )

Check if a lease has been taken by some other user.

- `$web` Web name, e.g. `"Main"`, or empty
- `$topic` Topic name, e.g. `"MyTopic"`, or `"Main.MyTopic"`

Return: `( $oopsUrl, $loginName, $unlockTime )` - The `$oopsUrl` for calling redirectCgiQuery(), user's `$loginName`, and estimated `$unlockTime` in minutes, or ( '', '', 0 ) if no lease exists.

- `$script` The script to invoke when continuing with the edit

**Since:** TWiki::Plugins::VERSION 1.010 (31 Dec 2002)

### <a name="set_TopicEditLock( $web, $topic,"></a> setTopicEditLock( $web, $topic, $lock )

- `$web` Web name, e.g. `"Main"`, or empty
- `$topic` Topic name, e.g. `"MyTopic"`, or `"Main.MyTopic"`
- `$lock` 1 to lease the topic, 0 to clear the lease=

Takes out a "lease" on the topic. The lease doesn't prevent anyone from editing and changing the topic, but it does redirect them to a warning screen, so this provides some protection. The `edit` script always takes out a lease.

It is **impossible** to fully lock a topic. Concurrent changes will be merged.

**Since:** TWiki::Plugins::VERSION 1.010 (31 Dec 2002)

### <a name="saveTopic( $web, $topic, $meta,"></a><a name="saveTopic( $web, $topic, $meta, "></a> saveTopic( $web, $topic, $meta, $text, $options ) -&gt; $error

- `$web` - web for the topic
- `$topic` - topic name
- `$meta` - reference to TWiki::Meta object
- `$text` - text of the topic (without embedded meta-data!!!
- `\%options` - ref to hash of save options `\%options` may include: <table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <td><code>dontlog</code></td>
    <td> don't log this change in twiki log </td>
  </tr>
  <tr>
    <td><code>comment</code></td>
    <td> comment for save </td>
  </tr>
  <tr>
    <td><code>minor</code></td>
    <td> True if this is a minor change, and is not to be notified </td>
  </tr>
</table>

Return: error message or undef.

**Since:** TWiki::Plugins::VERSION 1.000 (29 Jul 2001)

For example,

    my( $meta, $text ) = TWiki::Func::readTopic( $web, $topic )
    $text =~ s/APPLE/ORANGE/g;
    TWiki::Func::saveTopic( $web, $topic, $meta, $text, { comment => 'refruited' } );

**_Note:_** Plugins handlers ( e.g. `beforeSaveHandler` ) will be called as appropriate.

### <a name="save_TopicText( $web, $topic, $t"></a> saveTopicText( $web, $topic, $text, $ignorePermissions, $dontNotify ) -&gt; $oopsUrl

Save topic text, typically obtained by readTopicText(). Topic data usually includes meta data; the file attachment meta data is replaced by the meta data from the topic file if it exists.

- `$web` - Web name, e.g. `'Main'`, or empty
- `$topic` - Topic name, e.g. `'MyTopic'`, or `"Main.MyTopic"`
- `$text` - Topic text to save, assumed to include meta data
- `$ignorePermissions` - Set to `"1"` if checkAccessPermission() is already performed and OK
- `$dontNotify` - Set to `"1"` if not to notify users of the change

Return: `$oopsUrl` Empty string if OK; the `$oopsUrl` for calling redirectCgiQuery() in case of error

This method is a lot less efficient and much more dangerous than `saveTopic`.

**Since:** TWiki::Plugins::VERSION 1.010 (31 Dec 2002)

    my $text = TWiki::Func::readTopicText( $web, $topic );

    # check for oops URL in case of error:
    if( $text =~ /^http.*?\/oops/ ) {
        TWiki::Func::redirectCgiQuery( $query, $text );
        return;
    }
    # do topic text manipulation like:
    $text =~ s/old/new/g;
    # do meta data manipulation like:
    $text =~ s/(META\:FIELD.*?name\=\"TopicClassification\".*?value\=\")[^\"]*/$1BugResolved/;
    $oopsUrl = TWiki::Func::saveTopicText( $web, $topic, $text ); # save topic text

### <a name="moveTopic( $web, $topic, $newWeb"></a> moveTopic( $web, $topic, $newWeb, $newTopic )

- `$web` source web - required
- `$topic` source topic - required
- `$newWeb` dest web
- `$newTopic` dest topic

Renames the topic. Throws an exception if something went wrong. If $newWeb is undef, it defaults to $web. If $newTopic is undef, it defaults to $topic.

The destination topic must not already exist.

Rename a topic to the $TWiki::cfg\{TrashWebName\} to delete it.

**Since:** TWiki::Plugins::VERSION 1.1

    use Error qw( :try );

    try {
        moveTopic( "Work", "TokyoOffice", "Trash", "ClosedOffice" );
    } catch Error::Simple with {
        my $e = shift;
        # see documentation on Error::Simple
    } catch TWiki::AccessControlException with {
        my $e = shift;
        # see documentation on TWiki::AccessControlException
    } otherwise {
        ...
    };

### <a name="get_RevisionInfo($web, $topic, $"></a> getRevisionInfo($web, $topic, $rev, $attachment ) -&gt; ( $date, $user, $rev, $comment )

Get revision info of a topic or attachment

- `$web` - Web name, optional, e.g. `'Main'`
- `$topic` - Topic name, required, e.g. `'TokyoOffice'`
- `$rev` - revsion number, or tag name (can be in the format 1.2, or just the minor number)
- `$attachment` -attachment filename

Return: `( $date, $user, $rev, $comment )` List with: ( last update date, login name of last user, minor part of top revision number ), e.g. `( 1234561, 'phoeny', "5" )`

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <td> $date </td>
    <td> in epochSec </td>
  </tr>
  <tr>
    <td> $user </td>
    <td> Wiki name of the author (<strong>not</strong> login name) </td>
  </tr>
  <tr>
    <td> $rev </td>
    <td> actual rev number </td>
  </tr>
  <tr>
    <td> $comment </td>
    <td> WHAT COMMENT? </td>
  </tr>
</table>

NOTE: if you are trying to get revision info for a topic, use `$meta->getRevisionInfo` instead if you can - it is significantly more efficient, and returns a user object that contains other user information.

NOTE: prior versions of TWiki may under some circumstances have returned the login name of the user rather than the wiki name; the code documentation was totally unclear, and we have been unable to establish the intent. However the wikiname is obviously more useful, so that is what is returned.

**Since:** TWiki::Plugins::VERSION 1.000 (29 Jul 2001)

### <a name="get_RevisionAtTime( $web, $topic"></a> getRevisionAtTime( $web, $topic, $time ) -&gt; $rev

Get the revision number of a topic at a specific time.

- `$web` - web for topic
- `$topic` - topic
- `$time` - time (in epoch secs) for the rev

Return: Single-digit revision number, or undef if it couldn't be determined (either because the topic isn't that old, or there was a problem)

**Since:** TWiki::Plugins::VERSION 1.1

### <a name="readTopic( $web, $topic, $rev )"></a><a name="readTopic( $web, $topic, $rev ) "></a> readTopic( $web, $topic, $rev ) -&gt; ( $meta, $text )

Read topic text and meta data, regardless of access permissions.

- `$web` - Web name, required, e.g. `'Main'`
- `$topic` - Topic name, required, e.g. `'TokyoOffice'`
- `$rev` - revision to read (default latest)

Return: `( $meta, $text )` Meta data object and topic text

`$meta` is a perl 'object' of class `TWiki::Meta`. This class is fully documented in the source code documentation shipped with the release, or can be inspected in the `lib/TWiki/Meta.pm` file.

This method **ignores** topic access permissions. You should be careful to use `checkAccessPermissions` to ensure the current user has read access to the topic.

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="read_TopicText( $web, $topic, $r"></a> readTopicText( $web, $topic, $rev, $ignorePermissions ) -&gt; $text

Read topic text, including meta data

- `$web` - Web name, e.g. `'Main'`, or empty
- `$topic` - Topic name, e.g. `'MyTopic'`, or `"Main.MyTopic"`
- `$rev` - Topic revision to read, optional. Specify the minor part of the revision, e.g. `"5"`, not `"1.5"`; the top revision is returned if omitted or empty.
- `$ignorePermissions` - Set to `"1"` if checkAccessPermission() is already performed and OK; an oops URL is returned if user has no permission

Return: `$text` Topic text with embedded meta data; an oops URL for calling redirectCgiQuery() is returned in case of an error

This method is more efficient than `readTopic`, but returns meta-data embedded in the text. Plugins authors must be very careful to avoid damaging meta-data. You are recommended to use readTopic instead, which is a lot safer..

**Since:** TWiki::Plugins::VERSION 1.010 (31 Dec 2002)

### <a name="attachmentExists( $web, $topic,"></a><a name="attachmentExists( $web, $topic, "></a> attachmentExists( $web, $topic, $attachment ) -&gt; $boolean

Test if attachment exists

- `$web` - Web name, optional, e.g. `Main`.
- `$topic` - Topic name, required, e.g. `TokyoOffice`, or `Main.TokyoOffice`
- `$attachment` - attachment name, e.g.=logo.gif=

$web and $topic are parsed as described in the documentation for `normalizeWebTopicName`.

**Since:** TWiki::Plugins::VERSION 1.1

### <a name="readAttachment( $web, $topic, $n"></a> readAttachment( $web, $topic, $name, $rev ) -&gt; $data

- `$web` - web for topic
- `$topic` - topic
- `$name` - attachment name
- `$rev` - revision to read (default latest)

Read an attachment from the store for a topic, and return it as a string. The names of attachments on a topic can be recovered from the meta-data returned by `readTopic`. If the attachment does not exist, or cannot be read, undef will be returned. If the revision is not specified, the latest version will be returned.

View permission on the topic is required for the read to be successful. Access control violations are flagged by a TWiki::AccessControlException. Permissions are checked for the current user.

    my( $meta, $text ) = TWiki::Func::readTopic( $web, $topic );
    my @attachments = $meta->find( 'FILEATTACHMENT' );
    foreach my $a ( @attachments ) {
       try {
           my $data = TWiki::Func::readAttachment( $web, $topic, $a->{name} );
           ...
       } catch TWiki::AccessControlException with {
       };
    }

**Since:** TWiki::Plugins::VERSION 1.1

### <a name="saveAttachment( $web, $topic, $a"></a> saveAttachment( $web, $topic, $attachment, $opts )

- `$web` - web for topic
- `$topic` - topic to atach to
- `$attachment` - name of the attachment
- `$opts` - Ref to hash of options

`$opts` may include:

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <td><code>dontlog</code></td>
    <td> don't log this change in twiki log </td>
  </tr>
  <tr>
    <td><code>comment</code></td>
    <td> comment for save </td>
  </tr>
  <tr>
    <td><code>hide</code></td>
    <td> if the attachment is to be hidden in normal topic view </td>
  </tr>
  <tr>
    <td><code>stream</code></td>
    <td> Stream of file to upload </td>
  </tr>
  <tr>
    <td><code>file</code></td>
    <td> Name of a file to use for the attachment data. ignored if stream is set. Local file on the server. </td>
  </tr>
  <tr>
    <td><code>filepath</code></td>
    <td> Client path to file </td>
  </tr>
  <tr>
    <td><code>filesize</code></td>
    <td> Size of uploaded data </td>
  </tr>
  <tr>
    <td><code>filedate</code></td>
    <td> Date </td>
  </tr>
</table>

Save an attachment to the store for a topic. On success, returns undef. If there is an error, an exception will be thrown.

        try {
            TWiki::Func::saveAttachment( $web, $topic, 'image.gif',
                                         { file => 'image.gif',
                                           comment => 'Picture of Health',
                                           hide => 1 } );
       } catch Error::Simple with {
          # see documentation on Error
       } otherwise {
          ...
       };

**Since:** TWiki::Plugins::VERSION 1.1

### <a name="moveAttachment( $web, $topic, $a"></a> moveAttachment( $web, $topic, $attachment, $newWeb, $newTopic, $newAttachment )

- `$web` source web - required
- `$topic` source topic - required
- `$attachment` source attachment - required
- `$newWeb` dest web
- `$newTopic` dest topic
- `$newAttachment` dest attachment

Renames the topic. Throws an exception on error or access violation. If $newWeb is undef, it defaults to $web. If $newTopic is undef, it defaults to $topic. If $newAttachment is undef, it defaults to $attachment. If all of $newWeb, $newTopic and $newAttachment are undef, it is an error.

The destination topic must already exist, but the destination attachment must **not** exist.

Rename an attachment to $TWiki::cfg\{TrashWebName\}.TrashAttament to delete it.

    use Error qw( :try );

    try {
       # move attachment between topics
       moveAttachment( "Countries", "Germany", "AlsaceLorraine.dat",
                         "Countries", "France" );
       # Note destination attachment name is defaulted to the same as source
    } catch TWiki::AccessControlException with {
       my $e = shift;
       # see documentation on TWiki::AccessControlException
    } catch Error::Simple with {
       my $e = shift;
       # see documentation on Error::Simple
    };

**Since:** TWiki::Plugins::VERSION 1.1

## <a name="Assembling Pages"></a> Assembling Pages

### <a name="readTemplate( $name, $skin ) - $"></a> readTemplate( $name, $skin ) -&gt; $text

Read a template or skin. Embedded [[template directives|TWiki/TWikiTemplates]] get expanded

- `$name` - Template name, e.g. `'view'`
- `$skin` - Comma-separated list of skin names, optional, e.g. `'print'`

Return: `$text` Template text

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="loadTemplate ( $name, $skin, $we"></a> loadTemplate ( $name, $skin, $web ) -&gt; $text

- `$name` - template file name
- `$skin` - comma-separated list of skins to use (default: current skin)
- `$web` - the web to look in for topics that contain templates (default: current web)

Return: expanded template text (what's left after removal of all %TMPL:DEF% statements)

**Since:** TWiki::Plugins::VERSION 1.1

Reads a template and extracts template definitions, adding them to the list of loaded templates, overwriting any previous definition.

How TWiki searches for templates is described in [[TWikiTemplates]].

If template text is found, extracts include statements and fully expands them.

### <a name="expandTemplate( $def  ) - $strin"></a> expandTemplate( $def ) -&gt; $string

Do a , only expanding the template (not expanding any variables other than %TMPL)

- `$def` - template name

Return: the text of the expanded template

**Since:** TWiki::Plugins::VERSION 1.1

A template is defined using a %TMPL:DEF% statement in a template file. See the documentation on TWiki templates for more information.

### <a name="writeHeader( $query, $contentLen"></a> writeHeader( $query, $contentLength )

Prints a basic content-type HTML header for text/html to standard out

- `$query` - CGI query object. If not given, the default CGI query will be used. In most cases you should _not_ pass this parameter.
- `$contentLength` - Length of content

Return: none

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="redirect_CgiQuery( $query, $url,"></a> redirectCgiQuery( $query, $url, $passthru )

Redirect to URL

- `$query` - CGI query object. Ignored, only there for compatibility. The session CGI query object is used instead.
- `$url` - URL to redirect to
- `$passthru` - enable passthrough.

Return: none

Print output to STDOUT that will cause a 302 redirect to a new URL. Nothing more should be printed to STDOUT after this method has been called.

The `$passthru` parameter allows you to pass the parameters that were passed to the current query on to the target URL, as long as it is another URL on the same TWiki installation. If `$passthru` is set to a true value, then TWiki will save the current URL parameters, and then try to restore them on the other side of the redirect. Parameters are stored on the server in a cache file (see `{PassthroughDir} in =configure`).

Note that if `$passthru` is set, then any parameters in `$url` will be lost when the old parameters are restored. if you want to change any parameter values, you will need to do that in the current CGI query before redirecting e.g.

    my $query = TWiki::Func::getCgiQuery();
    $query->param(-name => 'text', -value => 'Different text');
    TWiki::Func::redirectCgiQuery(
      undef, TWiki::Func::getScriptUrl($web, $topic, 'edit'), 1);

`$passthru` does nothing if `$url` does not point to a script in the current TWiki installation.

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="add_ToHEAD( $id, $header )"></a> addToHEAD( $id, $header )

Adds `$header` to the HTML header (the

tag). This is useful for Plugins that want to include some javascript custom css.

- `$id` - Unique ID to prevent the same HTML from being duplicated. Plugins should use a prefix to prevent name clashes (e.g EDITTABLEPLUGIN\_JSCALENDAR)
- `$header` - the HTML to be added to the

section. The HTML must be valid in a HEAD tag - no checks are performed.

All TWiki variables present in `$header` will be expanded before being inserted into the ``

section.

Note that this is _not_ the same as the HTTP header, which is modified through the Plugins `modifyHeaderHandler`.

**Since:** TWiki::Plugins::VERSION 1.1

example:

    TWiki::Func::addToHEAD('PATTERN_STYLE','<link id="twikiLayoutCss" rel="stylesheet" type="text/css" href="%PUBURL%/TWiki/PatternSkin/layout.css" media="all" />')

### <a name="expand_CommonVariables( $text, $"></a> expandCommonVariables( $text, $topic, $web ) -&gt; $text

Expand all common `%VARIABLES%`

- `$text` - Text with variables to expand, e.g. `'Current user is %WIKIUSER%'`
- `$topic` - Current topic name, e.g. `'WebNotify'`
- `$web` - Web name, optional, e.g. `'Main'`. The current web is taken if missing

Return: `$text` Expanded text, e.g. `'Current user is TWikiGuest'`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

See also: expandVariablesOnTopicCreation

### <a name="renderText( $text, $web ) - $tex"></a> renderText( $text, $web ) -&gt; $text

Render text from TWiki markup into XHTML as defined in [[TWiki.TextFormattingRules|TWiki/TextFormattingRules]]

- `$text` - Text to render, e.g. `'*bold* text and =fixed font='`
- `$web` - Web name, optional, e.g. `'Main'`. The current web is taken if missing

Return: `$text` XHTML text, e.g. `'<b>bold</b> and <code>fixed font</code>'`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="internalLink( $pre, $web, $topic"></a> internalLink( $pre, $web, $topic, $label, $anchor, $createLink ) -&gt; $text

Render topic name and link label into an XHTML link. Normally you do not need to call this funtion, it is called internally by `renderText()`

- `$pre` - Text occuring before the TWiki link syntax, optional
- `$web` - Web name, required, e.g. `'Main'`
- `$topic` - Topic name to link to, required, e.g. `'WebNotify'`
- `$label` - Link label, required. Usually the same as `$topic`, e.g. `'notify'`
- `$anchor` - Anchor, optional, e.g. `'#Jump'`
- `$createLink` - Set to `'1'` to add question linked mark after topic name if topic does not exist;<br /> set to `'0'` to suppress link for non-existing topics

Return: `$text` XHTML anchor, e.g. `'<a href='/cgi-bin/view/Main/WebNotify#Jump'>notify</a>'`

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

## <a name="E-mail"></a> E-mail

### <a name="sendEmail ( $text, $retries ) -"></a><a name="sendEmail ( $text, $retries ) - "></a> sendEmail ( $text, $retries ) -&gt; $error

- `$text` - text of the mail, including MIME headers
- `$retries` - number of times to retry the send (default 1)

Send an e-mail specified as MIME format content. To specify MIME format mails, you create a string that contains a set of header lines that contain field definitions and a message body such as:

    To: liz@windsor.gov.uk
    From: serf@hovel.net
    CC: george@whitehouse.gov
    Subject: Revolution

    Dear Liz,

    Please abolish the monarchy (with King George's permission, of course)

    Thanks,

    A. Peasant

Leave a blank line between the last header field and the message body.

**Since:** TWiki::Plugins::VERSION 1.1

### <a name="wiki_ToEmail( $wikiName ) - $ema"></a> wikiToEmail( $wikiName ) -&gt; $email

- `$wikiName` - wiki name of the user

Get the e-mail address(es) of the named user. If the user has multiple e-mail addresses (for example, the user is a group), then the list will be comma-separated.

**Since:** TWiki::Plugins::VERSION 1.1

## <a name="Creating New Topics"></a> Creating New Topics

### <a name="expand_VariablesOnTopicCreation"></a><a name="expand_VariablesOnTopicCreation "></a> expandVariablesOnTopicCreation ( $text ) -&gt; $text

Expand the limited set of variables that are always expanded during topic creation

- `$text` - the text to process

Return: text with variables expanded

**Since:** TWiki::Plugins::VERSION 1.1

Expands only the variables expected in templates that must be statically expanded in new content.

The expanded variables are:

- `%DATE%` Signature-format date
- `%SERVERTIME%` See [[TWikiVariables]]
- `%GMTIME%` See [[TWikiVariables]]
- `%USERNAME%` Base login name
- `%WIKINAME%` Wiki name
- `%WIKIUSERNAME%` Wiki name with prepended web
- `%URLPARAM{...}%` - Parameters to the current CGI query
- `%NOP%` No-op

See also: expandVariables

## <a name="Special handlers"></a> Special handlers

Special handlers can be defined to make functions in plugins behave as if they were built-in to TWiki.

### <a name="register_TagHandler( $var, \fn,"></a><a name="register_TagHandler( $var, \fn, "></a> registerTagHandler( $var, \\&amp;fn, $syntax )

Should only be called from initPlugin.

Register a function to handle a simple variable. Handles both %VAR% and %VAR\{...\}%. Registered variables are treated the same as TWiki internal variables, and are expanded at the same time. This is a _lot_ more efficient than using the `commonTagsHandler`.

- `$var` - The name of the variable, i.e. the 'MYVAR' part of %MYVAR%. The variable name **must** match /^[A-Z]\[A-Z0-9\_]\*$/ or it won't work.
- `\&fn` - Reference to the handler function.
- `$syntax` can be 'classic' (the default) or 'context-free'. 'classic' syntax is appropriate where you want the variable to support classic TWiki syntax i.e. to accept the standard `%MYVAR{ "unnamed" param1="value1" param2="value2" }%` syntax, as well as an unquoted default parameter, such as `%MYVAR{unquoted parameter}%`. If your variable will only use named parameters, you can use 'context-free' syntax, which supports a more relaxed syntax. For example, %MYVAR\{param1=value1, value 2, param3="value 3", param4='value 5"\}%

**Since:** TWiki::Plugins::VERSION 1.1

The variable handler function must be of the form:

    sub handler(\%session, \%params, $topic, $web)

where:

- `\%session` - a reference to the TWiki session object (may be ignored)
- `\%params` - a reference to a TWiki::Attrs object containing parameters. This can be used as a simple hash that maps parameter names to values, with \_DEFAULT being the name for the default parameter.
- `$topic` - name of the topic in the query
- `$web` - name of the web in the query

for example, to execute an arbitrary command on the server, you might do this:

    sub initPlugin{
       TWiki::Func::registerTagHandler('EXEC', \&boo);
    }

    sub boo {
        my( $session, $params, $topic, $web ) = @_;
        my $cmd = $params->{_DEFAULT};

        return "NO COMMAND SPECIFIED" unless $cmd;

        my $result = `$cmd 2>&1`;
        return $params->{silent} ? '' : $result;
    }
    }

would let you do this: `%EXEC{"ps -Af" silent="on"}%`

Registered tags differ from tags implemented using the old TWiki approach (text substitution in `commonTagsHandler`) in the following ways:

- registered tags are evaluated at the same time as system tags, such as %SERVERTIME. `commonTagsHandler` is only called later, when all system tags have already been expanded (though they are expanded _again_ after `commonTagsHandler` returns).
- registered tag names can only contain alphanumerics and \_ (underscore)
- registering a tag `FRED` defines both `%FRED{...}%` **and also** `%FRED%`.
- registered tag handlers **cannot** return another tag as their only result (e.g. `return '%SERVERTIME%';`). It won't work.

### <a name="registerRESTHandler( $alias, \fn"></a> registerRESTHandler( $alias, \\&amp;fn, )

Should only be called from initPlugin.

Adds a function to the dispatch table of the REST interface

- `$alias` - The name .
- `\&fn` - Reference to the function.

**Since:** TWiki::Plugins::VERSION 1.1

The handler function must be of the form:

    sub handler(\%session)

where:

- `\%session` - a reference to the TWiki session object (may be ignored)

From the REST interface, the name of the plugin must be used as the subject of the invokation.

Example

----

The [[EmptyPlugin]] has the following call in the initPlugin handler:

       TWiki::Func::registerRESTHandler('example', \&restExample);

This adds the `restExample` function to the REST dispatch table for the [[EmptyPlugin]] under the 'example' alias, and allows it to be invoked using the URL

`http://server:port/bin/rest/EmptyPlugin/example`

note that the URL

`http://server:port/bin/rest/EmptyPlugin/restExample`

(ie, with the name of the function instead of the alias) will not work.

## <a name="Searching"></a> Searching

### <a name="search_InWebContent($searchStrin"></a> searchInWebContent($searchString, $web, \\@topics, \\%options ) -&gt; \\%map

Search for a string in the content of a web. The search is over all content, including meta-data. Meta-data matches will be returned as formatted lines within the topic content (meta-data matches are returned as lines of the format %META:\\w+\{.\*\}%)

- `$searchString` - the search string, in egrep format
- `$web` - The web to search in
- `\@topics` - reference to a list of topics to search
- `\%option` - reference to an options hash

The `\%options` hash may contain the following options:

- `type` - if `regex` will perform a egrep-syntax RE search (default '')
- `casesensitive` - false to ignore case (defaulkt true)
- `files_without_match` - true to return files only (default false). If `files_without_match` is specified, it will return on the first match in each topic (i.e. it will return only one match per topic, and will not return matching lines).

The return value is a reference to a hash which maps each matching topic name to a list of the lines in that topic that matched the search, as would be returned by 'grep'.

To iterate over the returned topics use:

    my $result = TWiki::Func::searchInWebContent( "Slimy Toad", $web, \@topics,
       { casesensitive => 0, files_without_match => 0 } );
    foreach my $topic (keys %$result ) {
       foreach my $matching_line ( @{$result->{$topic}} ) {
          ...etc

**Since:** TWiki::Plugins::VERSION 1.1

## <a name="Plugin-specific file handling"></a> Plugin-specific file handling

### <a name="get_WorkArea( $pluginName ) - $d"></a> getWorkArea( $pluginName ) -&gt; $directorypath

Gets a private directory for Plugin use. The Plugin is entirely responsible for managing this directory; TWiki will not read from it, or write to it.

The directory is guaranteed to exist, and to be writable by the webserver user. By default it will **not** be web accessible.

The directory and it's contents are permanent, so Plugins must be careful to keep their areas tidy.

**Since:** TWiki::Plugins::VERSION 1.1 (Dec 2005)

### <a name="readFile( $filename ) - $text"></a> readFile( $filename ) -&gt; $text

Read file, low level. Used for Plugin workarea.

- `$filename` - Full path name of file

Return: `$text` Content of file, empty if not found

**_NOTE:_** Use this function only for the Plugin workarea, **not** for topics and attachments. Use the appropriate functions to manipulate topics and attachments.

**Since:** TWiki::Plugins::VERSION 1.000 (07 Dec 2002)

### <a name="saveFile( $filename, $text )"></a> saveFile( $filename, $text )

Save file, low level. Used for Plugin workarea.

- `$filename` - Full path name of file
- `$text` - Text to save

Return: none

**_NOTE:_** Use this function only for the Plugin workarea, **not** for topics and attachments. Use the appropriate functions to manipulate topics and attachments.

**Since:** TWiki::Plugins::VERSION 1.000 (07 Dec 2002)

## <a name="General Utilities"></a> General Utilities

### <a name="get_RegularExpression( $name ) -"></a> getRegularExpression( $name ) -&gt; $expr

Retrieves a TWiki predefined regular expression or character class.

- `$name` - Name of the expression to retrieve. See notes below

Return: String or precompiled regular expression matching as described below.

**Since:** TWiki::Plugins::VERSION 1.020 (9 Feb 2004)

**_Note:_** TWiki internally precompiles several regular expressions to represent various string entities in an I18N-compatible manner. Plugins authors are encouraged to use these in matching where appropriate. The following are guaranteed to be present. Others may exist, but their use is unsupported and they may be removed in future TWiki versions.

In the table below, the expression marked type 'String' are intended for use within character classes (i.e. for use within square brackets inside a regular expression), for example:

       my $upper = TWiki::Func::getRegularExpression('upperAlpha');
       my $alpha = TWiki::Func::getRegularExpression('mixedAlpha');
       my $capitalized = qr/[$upper][$alpha]+/;

Those expressions marked type 'RE' are precompiled regular expressions that can be used outside square brackets. For example:

       my $webRE = TWiki::Func::getRegularExpression('webNameRegex');
       my $isWebName = ( $s =~ m/$webRE/ );

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <th bgcolor="#99CCCC"><strong> Name </strong></th>
    <th bgcolor="#99CCCC"><strong> Matches </strong></th>
    <th bgcolor="#99CCCC"><strong> Type </strong></th>
  </tr>
  <tr>
    <td> upperAlpha </td>
    <td> Upper case characters </td>
    <td> String </td>
  </tr>
  <tr>
    <td> upperAlphaNum </td>
    <td> Upper case characters and digits </td>
    <td> String </td>
  </tr>
  <tr>
    <td> lowerAlpha </td>
    <td> Lower case characters </td>
    <td> String </td>
  </tr>
  <tr>
    <td> lowerAlphaNum </td>
    <td> Lower case characters and digits </td>
    <td> String </td>
  </tr>
  <tr>
    <td> numeric </td>
    <td> Digits </td>
    <td> String </td>
  </tr>
  <tr>
    <td> mixedAlpha </td>
    <td> Alphabetic characters </td>
    <td> String </td>
  </tr>
  <tr>
    <td> mixedAlphaNum </td>
    <td> Alphanumeric characters </td>
    <td> String </td>
  </tr>
  <tr>
    <td> wikiWordRegex </td>
    <td>[[Main/WikiWords]]</td>
    <td> RE </td>
  </tr>
  <tr>
    <td> webNameRegex </td>
    <td> User web names </td>
    <td> RE </td>
  </tr>
  <tr>
    <td> anchorRegex </td>
    <td> #AnchorNames </td>
    <td> RE </td>
  </tr>
  <tr>
    <td> abbrevRegex </td>
    <td> Abbreviations e.g. GOV, IRS </td>
    <td> RE </td>
  </tr>
  <tr>
    <td> emailAddrRegex </td>
    <td><a href="mailto:email@address.com">email@address.com</a></td>
    <td> RE </td>
  </tr>
  <tr>
    <td> tagNameRegex </td>
    <td> Standard variable names e.g. %THIS_BIT% (THIS_BIT only) </td>
    <td> RE </td>
  </tr>
</table>

### <a name="normalize_WebTopicName($web, $to"></a> normalizeWebTopicName($web, $topic) -&gt; ($web, $topic)

Parse a web and topic name, supplying defaults as appropriate.

- `$web` - Web name, identifying variable, or empty string
- `$topic` - Topic name, may be a web.topic string, required.

Return: the parsed Web/Topic pair

**Since:** TWiki::Plugins::VERSION 1.1

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <th bgcolor="#99CCCC"><strong> Input </strong></th>
    <th bgcolor="#99CCCC"><strong> Return </strong></th>
  </tr>
  <tr>
    <td><tt>( 'Web', 'Topic' ) </tt></td>
    <td><tt>( 'Web', 'Topic' ) </tt></td>
  </tr>
  <tr>
    <td><tt>( '', 'Topic' ) </tt></td>
    <td><tt>( 'Main', 'Topic' ) </tt></td>
  </tr>
  <tr>
    <td><tt>( '', '' ) </tt></td>
    <td><tt>( 'Main', 'WebHome' ) </tt></td>
  </tr>
  <tr>
    <td><tt>( '', 'Web/Topic' ) </tt></td>
    <td><tt>( 'Web', 'Topic' ) </tt></td>
  </tr>
  <tr>
    <td><tt>( '', 'Web/Subweb/Topic' ) </tt></td>
    <td><tt>( 'Web/Subweb', 'Topic' ) </tt></td>
  </tr>
  <tr>
    <td><tt>( '', 'Web.Topic' ) </tt></td>
    <td><tt>( 'Web', 'Topic' ) </tt></td>
  </tr>
  <tr>
    <td><tt>( '', 'Web.Subweb.Topic' ) </tt></td>
    <td><tt>( 'Web/Subweb', 'Topic' ) </tt></td>
  </tr>
  <tr>
    <td><tt>( 'Web1', 'Web2.Topic' )</tt></td>
    <td><tt>( 'Web2', 'Topic' ) </tt></td>
  </tr>
</table>

Note that hierarchical web names ([[SubWeb]]) are only available if hierarchical webs are enabled in `configure`.

The symbols %USERSWEB%, %SYSTEMWEB%, %DOCWEB%, %MAINWEB% and %TWIKIWEB% can be used in the input to represent the web names set in $cfg\{UsersWebName\} and $cfg\{SystemWebName\}. For example:

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <th bgcolor="#99CCCC"><strong> Input </strong></th>
    <th bgcolor="#99CCCC"><strong> Return </strong></th>
  </tr>
  <tr>
    <td><tt>( '%USERSWEB%', 'Topic' )</tt></td>
    <td><tt>( 'Main', 'Topic' ) </tt></td>
  </tr>
  <tr>
    <td><tt>( '%SYSTEMWEB%', 'Topic' )</tt></td>
    <td><tt>( 'TWiki', 'Topic' ) </tt></td>
  </tr>
  <tr>
    <td><tt>( '', '%DOCWEB%.Topic' )</tt></td>
    <td><tt>( 'TWiki', 'Topic' ) </tt></td>
  </tr>
</table>

### <a name="writeWarning( $text )"></a> writeWarning( $text )

Log Warning that may require admin intervention to data/warning.txt

- `$text` - Text to write; timestamp gets added

Return: none

**Since:** TWiki::Plugins::VERSION 1.020 (16 Feb 2004)

### <a name="writeDebug( $text )"></a> writeDebug( $text )

Log debug message to data/debug.txt

- `$text` - Text to write; timestamp gets added

Return: none

**Since:** TWiki::Plugins::VERSION 1.020 (16 Feb 2004)

### <a name="formatTime( $time, $format, $tim"></a> formatTime( $time, $format, $timezone ) -&gt; $text

Format the time in seconds into the desired time string

- `$time` - Time in epoc seconds
- `$format` - Format type, optional. Default e.g. `'31 Dec 2002 - 19:30'`. Can be `'$iso'` (e.g. `'2002-12-31T19:30Z'`), `'$rcs'` (e.g. `'2001/12/31 23:59:59'`, `'$http'` for HTTP header format (e.g. `'Thu, 23 Jul 1998 07:21:56 GMT'`), or any string with tokens `'$seconds, $minutes, $hours, $day, $wday, $month, $mo, $year, $ye, $tz'` for seconds, minutes, hours, day of month, day of week, 3 letter month, 2 digit month, 4 digit year, 2 digit year, timezone string, respectively
- `$timezone` - either not defined (uses the displaytime setting), 'gmtime', or 'servertime'

Return: `$text` Formatted time string

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <td> Note: </td>
    <td> if you used the removed formatGmTime, add a third parameter 'gmtime' </td>
  </tr>
</table>

**Since:** TWiki::Plugins::VERSION 1.020 (26 Feb 2004)

### <a name="is_ValidWikiWord ( $text ) - $bo"></a> isValidWikiWord ( $text ) -&gt; $boolean

Check for a valid [[WikiWord]] or [[WikiName]]

- `$text` - Word to test

**Since:** TWiki::Plugins::VERSION 1.100 (Dec 2005)

### <a name="extractParameters($attr ) - %par"></a> extractParameters($attr ) -&gt; %params

Extract all parameters from a variable string and returns a hash of parameters

- `$attr` - Attribute string

Return: `%params` Hash containing all parameters. The nameless parameter is stored in key `_DEFAULT`

**Since:** TWiki::Plugins::VERSION 1.025 (26 Aug 2004)

- Example:
  - Variable: `%TEST{ 'nameless' name1="val1" name2="val2" }%`
  - First extract text between `{...}` to get: `'nameless' name1="val1" name2="val2"`
  - Then call this on the text: <br />
- params = TWiki::Func::extractParameters( $text );=
  - The `%params` hash contains now: <br />`_DEFAULT => 'nameless'`<br />`name1 => "val1"`<br />`name2 => "val2"`

### <a name="extract_NameValuePair( $attr, $n"></a> extractNameValuePair( $attr, $name ) -&gt; $value

Extract a named or unnamed value from a variable parameter string - Note: | Function TWiki::Func::extractParameters is more efficient for extracting several parameters

- `$attr` - Attribute string
- `$name` - Name, optional

Return: `$value` Extracted value

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

- Example:
  - Variable: `%TEST{ 'nameless' name1="val1" name2="val2" }%`
  - First extract text between `{...}` to get: `'nameless' name1="val1" name2="val2"`
  - Then call this on the text: <br />`my $noname = TWiki::Func::extractNameValuePair( $text );`<br />`my $val1  = TWiki::Func::extractNameValuePair( $text, "name1" );`<br />`my $val2  = TWiki::Func::extractNameValuePair( $text, "name2" );`

## <a name="Deprecated functions"></a> Deprecated functions

From time-to-time, the TWiki developers will add new functions to the interface (either to [[TWikiFuncDotPm]], or new handlers). Sometimes these improvements mean that old functions have to be deprecated to keep the code manageable. When this happens, the deprecated functions will be supported in the interface for at least one more TWiki release, and probably longer, though this cannot be guaranteed.

Updated plugins may still need to define deprecated handlers for compatibility with old TWiki versions. In this case, the plugin package that defines old handlers can suppress the warnings in %FAILEDPLUGINS%.

This is done by defining a map from the handler name to the `TWiki::Plugins` version _in which the handler was first deprecated_. For example, if we need to define the `endRenderingHandler` for compatibility with `TWiki::Plugins` versions before 1.1, we would add this to the plugin:

    package TWiki::Plugins::SinkPlugin;
    use vars qw( %TWikiCompatibility );
    $TWikiCompatibility{endRenderingHandler} = 1.1;

If the currently-running TWiki version is 1.1 _or later_, then the _handler will not be called_ and _the warning will not be issued_. TWiki with versions of `TWiki::Plugins` before 1.1 will still call the handler as required.

The following functions are retained for compatibility only. You should stop using them as soon as possible.

### <a name="get_ScriptUrlPath( ) - $path"></a> getScriptUrlPath( ) -&gt; $path

Get script URL path

**DEPRECATED** since 1.1 - use `getScriptUrl` instead.

Return: `$path` URL path of TWiki scripts, e.g. `"/cgi-bin"`

**WARNING:** you are strongly recommended **not** to use this function, as the \{ScriptUrlPaths\} URL rewriting rules will not apply to urls generated using it.

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="get_PublicWebList( ) - @webs"></a> getPublicWebList( ) -&gt; @webs

**DEPRECATED** since 1.1 - use `getListOfWebs` instead.

Get list of all public webs, e.g. all webs that do not have the `NOSEARCHALL` flag set in the [[WebPreferences]]

Return: `@webs` List of all public webs, e.g. `( 'Main',  'Know', 'TWiki' )`

**Since:** TWiki::Plugins::VERSION 1.000 (07 Dec 2002)

### <a name="format_GmTime( $time, $format )"></a><a name="format_GmTime( $time, $format ) "></a> formatGmTime( $time, $format ) -&gt; $text

**DEPRECATED** since 1.1 - use `formatTime` instead.

Format the time to GM time

- `$time` - Time in epoc seconds
- `$format` - Format type, optional. Default e.g. `'31 Dec 2002 - 19:30'`, can be `'iso'` (e.g. `'2002-12-31T19:30Z'`), `'rcs'` (e.g. `'2001/12/31 23:59:59'`, `'http'` for HTTP header format (e.g. `'Thu, 23 Jul 1998 07:21:56 GMT'`)

Return: `$text` Formatted time string

**Since:** TWiki::Plugins::VERSION 1.000 (7 Dec 2002)

### <a name="get_DataDir( ) - $dir"></a> getDataDir( ) -&gt; $dir

**DEPRECATED** since 1.1 - use the "Webs, Topics and Attachments" functions to manipulate topics instead

Get data directory (topic file root)

Return: `$dir` Data directory, e.g. `'/twiki/data'`

This function violates store encapsulation and is therefore **deprecated**.

**Since:** TWiki::Plugins::VERSION 1.000 (07 Dec 2002)

### <a name="get_PubDir( ) - $dir"></a> getPubDir( ) -&gt; $dir

**DEPRECATED** since 1.1 - use the "Webs, Topics and Attachments" functions to manipulateattachments instead

Get pub directory (file attachment root). Attachments are in `$dir/Web/TopicName`

Return: `$dir` Pub directory, e.g. `'/htdocs/twiki/pub'`

This function violates store encapsulation and is therefore **deprecated**.

Use `readAttachment` and `saveAttachment` instead.

**Since:** TWiki::Plugins::VERSION 1.000 (07 Dec 2002)

### <a name="checkDependencies( $moduleName,"></a><a name="checkDependencies( $moduleName, "></a> checkDependencies( $moduleName, $dependenciesRef ) -&gt; $error

**DEPRECATED** since 1.1 - use TWiki:Plugins.BuildContrib and define DEPENDENCIES that can be statically evaluated at install time instead. It is a lot more efficient.

**Since:** TWiki::Plugins::VERSION 1.025 (01 Aug 2004)
