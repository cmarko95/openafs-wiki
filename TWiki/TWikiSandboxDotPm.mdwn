# <a name="Package &lt;code&gt;TWiki::Sandbox="></a> Package =TWiki::Sandbox

This object provides an interface to the outside world. All calls to system functions, or handling of file names, should be brokered by this object.

<div>
  <ul>
    <li><a href="#Package =TWiki::Sandbox="> Package TWiki::Sandbox</a><ul>
        <li><a href="#ClassMethod <strong>new</strong> ($os,$realOS)"> ClassMethod new <tt>($os,$realOS)</tt></a></li>
        <li><a href="#StaticMethod *untaintUnchecked*"> StaticMethod untaintUnchecked <tt>($string) -&gt; $untainted</tt></a></li>
        <li><a href="#StaticMethod *normalize_FileName"> StaticMethod normalizeFileName <tt>($string) -&gt; $filename</tt></a></li>
        <li><a href="#ObjectMethod <strong>sysCommand</strong> ($temp"> ObjectMethod sysCommand <tt>($template,@params) -&gt; ($data,$exit)</tt></a></li>
      </ul>
    </li>
  </ul>
</div>

## <a name="ClassMethod &lt;strong&gt;new&lt;/strong&gt; ($os,$realOS)"></a> [[ClassMethod]] **new** `($os,$realOS)`

Construct a new sandbox suitable for $os, setting flags for platform features that help. $realOS distinguishes Perl variants on platforms such as Windows.

## <a name="StaticMethod &lt;strong&gt;untaintUnchecked*"></a><a name="StaticMethod *untaintUnchecked&lt;/strong&gt; "></a> [[StaticMethod]] **untaintUnchecked** `($string) -> $untainted`

Untaints $string without any checks (dangerous). If $string is undefined, return undef.

The intent is to use this routine to be able to find all untainting places using grep.

## <a name="StaticMethod &lt;strong&gt;normalize_FileName"></a> [[StaticMethod]] \*normalizeFileName `($string) -> $filename`

STATIC Errors out if $string contains filtered characters.

The returned string is not tainted, but it may contain shell metacharacters and even control characters.

## <a name="ObjectMethod &lt;strong&gt;sysCommand&lt;/strong&gt; ($temp"></a> [[ObjectMethod]] **sysCommand** `($template,@params) -> ($data,$exit)`

Invokes the program described by $template and @params, and returns the output of the program and an exit code. STDOUT is returned. STDERR is THROWN AWAY.

The caller has to ensure that the invoked program does not react in a harmful way to the passed arguments. sysCommand merely ensures that the shell does not interpret any of the passed arguments.
