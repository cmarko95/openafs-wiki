# <a name="TWiki Plugins"></a> TWiki Plugins

_Add functionality to TWiki with readily available Plugins; create Plugins based on APIs_

<div>
  <ul>
    <li><a href="#TWiki Plugins"> TWiki Plugins</a><ul>
        <li><a href="#Overview"> Overview</a></li>
        <li><a href="#Installing Plugins"> Installing Plugins</a><ul>
            <li><a href="#On-Site Pretesting"> On-Site Pretesting</a></li>
            <li><a href="#Some Notes on Plugin Performance"> Some Notes on Plugin Performance</a></li>
          </ul>
        </li>
        <li><a href="#Managing Installed Plugins"> Managing Installed Plugins</a><ul>
            <li><a href="#Enabling Plugins"> Enabling Plugins</a></li>
            <li><a href="#Plugin Evaluation Order"> Plugin Evaluation Order</a></li>
            <li><a href="#Plugin-Specific Settings"> Plugin-Specific Settings</a></li>
            <li><a href="#Listing Active Plugins"> Listing Active Plugins</a><ul>
                <li><a href="#=%ACTIVATEDPLUGINS%="> %ACTIVATEDPLUGINS%</a></li>
                <li><a href="#=%PLUGINDESCRIPTIONS%="> %PLUGINDESCRIPTIONS%</a></li>
                <li><a href="#=%FAILEDPLUGINS%="> %FAILEDPLUGINS%</a></li>
              </ul>
            </li>
          </ul>
        </li>
        <li><a href="#The TWiki Plugin API"> The TWiki Plugin API</a><ul>
            <li><a href="#Available Core Functions"> Available Core Functions</a></li>
            <li><a href="#Predefined Hooks"> Predefined Hooks</a></li>
            <li><a href="#Hints on Writing Fast Plugins"> Hints on Writing Fast Plugins</a></li>
            <li><a href="#Version Detection"> Version Detection</a></li>
            <li><a href="#Security"> Security</a></li>
          </ul>
        </li>
        <li><a href="#Creating Plugins"> Creating Plugins</a><ul>
            <li><a href="#Anatomy of a Plugin"> Anatomy of a Plugin</a></li>
            <li><a href="#Creating the Perl Module"> Creating the Perl Module </a></li>
            <li><a href="#Writing the Documentation Topic"> Writing the Documentation Topic</a></li>
            <li><a href="#Packaging for Distribution"> Packaging for Distribution</a></li>
            <li><a href="#Measuring and Improving the Plug"> Measuring and Improving the Plugin Performance</a></li>
            <li><a href="#Publishing for Public Use"> Publishing for Public Use</a></li>
          </ul>
        </li>
        <li><a href="#Recommended Storage of Plugin Sp"> Recommended Storage of Plugin Specific Data</a><ul>
            <li><a href="#Plugin Internal Data"> Plugin Internal Data</a></li>
            <li><a href="#Web Accessible Data"> Web Accessible Data</a></li>
          </ul>
        </li>
        <li><a href="#Integrating with configure"> Integrating with <code>configure</code></a><ul>
            <li><a href="#Structure of a Config.spec file"> Structure of a <code>Config.spec</code> file</a></li>
          </ul>
        </li>
        <li><a href="#Maintaining Plugins"> Maintaining Plugins</a><ul>
            <li><a href="#Discussions and Feedback on Plug"> Discussions and Feedback on Plugins</a></li>
            <li><a href="#Maintaining Compatibility with E"> Maintaining Compatibility with Earlier TWiki Versions</a></li>
            <li><a href="#Handling deprecated functions"> Handling deprecated functions</a></li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</div>

## <a name="Overview"></a> Overview

You can add Plugins to extend TWiki functionality, without altering the core code. A plug-in approach lets you:

- add virtually unlimited features while keeping the main TWiki code compact and efficient;
- heavily customize an installation and still do clean updates to new versions of TWiki;
- rapidly develop new TWiki functions in Perl using the Plugin API.

Everything to do with TWiki Plugins - demos, new releases, downloads, development, general discussion - is available at TWiki.org, in the ** TWiki:Plugins ** web.

TWiki Plugins are developed and contributed by interested members of the community. Plugins are provided on an 'as is' basis; they are not a part of TWiki, but are independently developed and maintained.

**_Relevant links on TWiki.org:_**

- TWiki:TWiki.TWikiPluginsSupplement - **_%T% tip:_** supplemental documentation on TWiki plugins
- TWiki:Plugins.PluginPackage - list of all contributed plugin packages
- TWiki:Plugins.PluginDevelopment - discussion and feedback on contributed plugins
- TWiki:Plugins.PluginBrainstorming - open forum for new plugin ideas
- TWiki:Plugins.PluginPackageHowTo - template to create a new plugin package

**_See other types of extensions:_** [[TWikiAddOns]], [[TWikiContribs]], [[TWikiSkins]]

<a name="InstallPlugin"></a>

## <a name="Installing Plugins"></a> Installing Plugins

Each TWiki Plugin comes with its own documentation: step-by-step installation instructions, a detailed description of any special requirements, version details, and a working example for testing. Many Plugins have an install script that automates these steps for you.

**Special Requirements:** Some Plugins need certain Perl modules to be preinstalled on the host system. Plugins may also use other resources, like graphics, other modules, applications, and templates. You should be able to find detailed instructions in the Plugin's documentation.

Each Plugin has a standard release topic, located in the TWiki:Plugins web at TWiki.org. There's usually a number of other related topics, such as a developers page, and an appraisal page.

<a name="PreTesting"></a>

### <a name="On-Site Pretesting"></a> On-Site Pretesting

The recommended approach to testing new Plugins before making them public is to create a second local TWiki installation, and test the Plugin there. You can allow selected users access to the test area. Once you are satisfied that it won't compromise your main installation, you can install it there as well.

[[InstalledPlugins]] shows which Plugins are: 1) installed, 2) loading properly, and 3) what TWiki:Codev.PluginHandlers they invoke. Any failures are shown in the Errors section. The <code>[[%FAILEDPLUGINS%|Main/VarFAILEDPLUGINS]]</code> variable can be used to debug failures. You may also want to check your webserver error log and the various TWiki log files.

### <a name="Some Notes on Plugin Performance"></a> Some Notes on Plugin Performance

The performance of the system depends to some extent on the number of Plugins installed and on the Plugin implementation. Some Plugins impose no measurable performance decrease, some do. For example, a Plugin might use many Perl libraries that need to be initialized with each page view (unless you run mod\_perl). You can only really tell the performance impact by installing the Plugin and by measuring the performance with and without the new Plugin. Use the TWiki:Plugins.PluginBenchmarkAddOn, or test manually with the Apache `ab` utility. Example on Unix:%BR% `time wget -qO /dev/null http://www.dementia.org/twiki/view/%SYSTEMWEB%/AbcPlugin`

%T% If you need to install an "expensive" Plugin, but you only need its functionality only in a subset of your data, you can disable it elsewhere by defining the %DISABLEDPLUGINS% TWiki variable.

Define `DISABLEDPLUGINS` to be a comma-separated list of names of plugins to disable. Define it in %USERSWEB%.TWikiPreferences to disable those plugins everywhere, in the WebPreferences topic to disable them in an individual web, or in a topic to disable them in that topic. For example,

       * Set DISABLEDPLUGINS = SpreadSheetPlugin, EditTablePlugin

<a name="ManagingPlugins"></a>

## <a name="Managing Installed Plugins"></a> Managing Installed Plugins

Some Plugins require additional settings or offer extra options that you have to select. Also, you may want to make a Plugin available only in certain webs, or temporarily disable it. And may want to list all available Plugins in certain topics. You can handle all of these management tasks with simple procedures:

### <a name="Enabling Plugins"></a> Enabling Plugins

Plugins can be enabled and disabled with the [configure](http://www.dementia.org/twiki/configure) script. An installed Plugin needs to be enabled before it can be used.

### <a name="Plugin Evaluation Order"></a> Plugin Evaluation Order

By default, TWiki executes Plugins in alphabetical order on Plugin name. It is possible to change the order, for example to evaluate database variables before the spreadsheet CALCs. This can be done with `{PluginsOrder}` in the Plugins section of [configure](http://www.dementia.org/twiki/configure).

### <a name="Plugin-Specific Settings"></a> Plugin-Specific Settings

Plugins are usually configured by variables accessible though the [configure](http://www.dementia.org/twiki/configure) interface, but in some cases (usually older plugins) TWiki preferences are used. If a TWiki variable is defined in a Plugin topic e.g:

- Set SETTING = Create dynamic foo bar reports

Then these settings can be retrieved as preferences variables like `%<pluginname>_<var>%`. For example, `%RUBBERPLUGIN_SETTING%` shows the value of SETTING in the RubberPlugin topic.

### <a name="Listing Active Plugins"></a> Listing Active Plugins

Plugin status variables let you list all active Plugins wherever needed.

This site is running TWiki version **TWiki-4.1.2, Sat, 03 Mar 2007, build 13046**, Plugin API version **1\.11**

<a name="ActivatedPlugins"></a>

#### <a name="=%ACTIVATEDPLUGINS%="></a> `%ACTIVATEDPLUGINS%`

On this TWiki site, the enabled Plugins are: [[SpreadSheetPlugin]], [[CommentPlugin]], [[EditTablePlugin]], [[InterwikiPlugin]], [[PreferencesPlugin]], [[SlideShowPlugin]], [[SmiliesPlugin]], [[TablePlugin]], [[TwistyPlugin]].

#### <a name="=%PLUGINDESCRIPTIONS%="></a> `%PLUGINDESCRIPTIONS%`

- [[SpreadSheetPlugin]] <span>(any TWiki, 10197)</span>:
- [[CommentPlugin]] <span>(Dakar, 11359)</span>: Allows users to quickly post comments to a page without an edit/preview/save cycle
- [[EditTablePlugin]] <span>(any TWiki, 11646)</span>:
- [[InterwikiPlugin]] <span>(Dakar, $Rev: 11935$)</span>:
- [[PreferencesPlugin]] <span>(Dakar, 9839)</span>:
- [[SlideShowPlugin]] <span>(Any TWiki, $Rev: 12847$)</span>:
- [[SmiliesPlugin]] <span>(Dakar, 8154)</span>:
- [[TablePlugin]] <span>(1.020, 12339)</span>:
- [[TwistyPlugin]] <span>(1.2.0, $Rev: 12154$)</span>:

<a name="FailedPlugins"></a>

#### <a name="=%FAILEDPLUGINS%="></a> `%FAILEDPLUGINS%`

<table border="1">
  <tr>
    <th>Plugin</th>
    <th>Errors</th>
  </tr>
  <tr valign="top">
    <td>[[TWiki/SpreadSheetPlugin]]</td>
    <td><pre>
Plugins: could not fully register SpreadSheetPlugin, no plugin topic
</pre></td>
  </tr>
  <tr valign="top">
    <td>[[TWiki/CommentPlugin]]</td>
    <td><pre>
Plugins: could not fully register CommentPlugin, no plugin topic
</pre></td>
  </tr>
  <tr valign="top">
    <td>[[TWiki/EditTablePlugin]]</td>
    <td><pre>
Plugins: could not fully register EditTablePlugin, no plugin topic
</pre></td>
  </tr>
  <tr valign="top">
    <td>[[TWiki/InterwikiPlugin]]</td>
    <td><pre>
Plugins: could not fully register InterwikiPlugin, no plugin topic
</pre></td>
  </tr>
  <tr valign="top">
    <td>[[TWiki/PreferencesPlugin]]</td>
    <td><pre>
Plugins: could not fully register PreferencesPlugin, no plugin topic
</pre></td>
  </tr>
  <tr valign="top">
    <td>[[TWiki/SlideShowPlugin]]</td>
    <td><pre>
Plugins: could not fully register SlideShowPlugin, no plugin topic
</pre></td>
  </tr>
  <tr valign="top">
    <td>[[TWiki/SmiliesPlugin]]</td>
    <td><pre>
Plugins: could not fully register SmiliesPlugin, no plugin topic
</pre></td>
  </tr>
  <tr valign="top">
    <td>[[TWiki/TablePlugin]]</td>
    <td><pre>
Plugins: could not fully register TablePlugin, no plugin topic
</pre></td>
  </tr>
  <tr valign="top">
    <td>[[TWiki/TwistyPlugin]]</td>
    <td><pre>
Plugins: could not fully register TwistyPlugin, no plugin topic
</pre></td>
  </tr>
</table>
<table border="1">
  <tr>
    <th>Handler</th>
    <th>Plugins</th>
  </tr>
  <tr valign="top">
    <td>beforeCommonTagsHandler</td>
    <td>PreferencesPlugin<br />TwistyPlugin</td>
  </tr>
  <tr valign="top">
    <td>beforeSaveHandler</td>
    <td>CommentPlugin</td>
  </tr>
  <tr valign="top">
    <td>commonTagsHandler</td>
    <td>SpreadSheetPlugin<br />CommentPlugin<br />EditTablePlugin<br />SlideShowPlugin<br />SmiliesPlugin</td>
  </tr>
  <tr valign="top">
    <td>initPlugin</td>
    <td>SpreadSheetPlugin<br />CommentPlugin<br />EditTablePlugin<br />InterwikiPlugin<br />PreferencesPlugin<br />SlideShowPlugin<br />SmiliesPlugin<br />TablePlugin<br />TwistyPlugin</td>
  </tr>
  <tr valign="top">
    <td>postRenderingHandler</td>
    <td>EditTablePlugin<br />PreferencesPlugin<br />TwistyPlugin</td>
  </tr>
  <tr valign="top">
    <td>preRenderingHandler</td>
    <td>InterwikiPlugin<br />SmiliesPlugin<br />TablePlugin</td>
  </tr>
</table>

**9 plugins**

<a name="PluginAPI"></a>

## <a name="The TWiki Plugin API"></a> The TWiki Plugin API

The Application Programming Interface (API) for TWiki Plugins provides the specifications for hooking into the core TWiki code from your external Perl Plugin module.

### <a name="Available Core Functions"></a> Available Core Functions

The [[TWikiFuncDotPm]] module (`lib/TWiki/Func.pm`) describes **all** the interfaces available to Plugins. Plugins should **only** use the interfaces described in this module.

**_%X% Note:_** If you use other core functions not described in `Func.pm`, you run the risk of creating security holes. Also, your Plugin will likely break and require updating when you upgrade to a new version of TWiki.

### <a name="Predefined Hooks"></a> Predefined Hooks

In addition to TWiki core functions, Plugins can use **predefined hooks**, or **callbacks**, as described in the `lib/TWiki/Plugins/EmptyPlugin.pm` module.

- All but the initPlugin are disabled. To enable a callback, remove `DISABLE_` from the function name.

TWiki:Codev/StepByStepRenderingOrder helps you decide which rendering handler to use.

<a name="FastPluginHints"></a>

### <a name="Hints on Writing Fast Plugins"></a> Hints on Writing Fast Plugins

- Delay initialization as late as possible. For example, if your Plugin is a simple syntax processor, you might delay loading extra Perl modules until you actually see the syntax in the text.
  - For example, use an `eval` block like this:%BR% `eval { require IPC::Run }` %BR% `return "<font color=\"red\">SamplePlugin: Can't load required modules ($@)</font>" if $@;`
- Keep the main plugin package as small as possible; create other packages that are loaded if and only if they are used. For example, create sub-packages of BathPlugin in `lib/TWiki/Plugins/BathPlugin/`.
- Avoid using preferences in the plugin topic; set `$NO_PREFS_IN_TOPIC` if you possibly can, as that will stop TWiki from reading the plugin topic for every page. Use [[Config.spec|Main/WebHome#ConfigSpec]] instead.
- Use registered tag handlers
- [[Measure the performance|Main/WebHome#MeasurePerformance]] to see the difference

### <a name="Version Detection"></a> Version Detection

To eliminate the incompatibility problems that are bound to arise from active open Plugin development, a Plugin versioning system is provided for automatic compatibility checking.

- All plugin packages require a `$VERSION` variable. This should be an integer, or a subversion version id.

- The `initPlugin` handler should check all dependencies and return 1 if the initialization is OK or 0 if something went wrong.
  - The Plugin initialization code does not register a Plugin that returns 0 (or that has no `initPlugin` handler).

- `$TWiki::Plugins::VERSION` in the `TWiki::Plugins` module contains the TWiki Plugin API version, currently **1\.11**.
  - You can also use the <code>[[%PLUGINVERSION{}%|Main/VarPLUGINVERSION]]</code> variable to query the Plugin API version or the version of installed Plugins.

### <a name="Security"></a> Security

- Badly written Plugins can open huge security holes in TWiki. This is especially true if care isn't taken to prevent execution of arbitrary commands on the server.
- Don't allow sensitive configuration data to be edited by users. it is better to add sensitive configuration options to the `%TWiki::cfg` hash than adding it as preferences in the Plugin topic
  - See TWiki:Plugins.MailInContrib for an example of this
  - TWiki:Plugins.BuildContrib can help you with this
- Always use the TWiki::Sandbox to execute commands.
- Always audit the Plugins you install, and make sure you are happy with the level of security provided. While every effort is made to monitor Plugin authors activities, at the end of the day they are uncontrolled user contributions.

<a name="CreatePlugins"></a>

## <a name="Creating Plugins"></a> Creating Plugins

With a reasonable knowledge of the Perl scripting language, you can create new Plugins or modify and extend existing ones. Basic plug-in architecture uses an Application Programming Interface (API), a set of software instructions that allow external code to interact with the main program. The [[TWiki Plugin API|Main/WebHome#PluginAPI]] Plugins by providing a programming interface for TWiki.

### <a name="Anatomy of a Plugin"></a> Anatomy of a Plugin

A (very) basic TWiki Plugin consists of two files:

- a Perl module, e.g. `MyFirstPlugin.pm`
- a documentation topic, e.g. `MyFirstPlugin.txt`

The Perl module can be a block of code that talks to with TWiki alone, or it can include other elements, like other Perl modules (including other Plugins), graphics, TWiki templates, external applications (ex: a Java applet), or just about anything else it can call. In particular, files that should be web-accessible (graphics, Java applets ...) are best placed as attachments of the `MyFirstPlugin` topic. Other needed Perl code is best placed in a `lib/TWiki/Plugins/MyFirstPlugin/` directory.

The Plugin API handles the details of connecting your Perl module with main TWiki code. When you're familiar with the [[Plugin API|Main/WebHome#PluginAPI]], you're ready to develop Plugins.

_The TWiki::Plugins.BuildContrib module provides a lot of support for plugins development, including a plugin creator, automatic publishing support, and automatic installation script writer. If you plan on writing more than one plugin, you probably need it_.

### <a name="Creating the Perl Module"></a> Creating the Perl Module

Copy file `lib/TWiki/Plugins/EmptyPlugin.pm` to `<name>Plugin.pm`. The `EmptyPlugin.pm` module contains mostly empty functions, so it does nothing, but it's ready to be used. Customize it. Refer to the [[Plugin API|Main/WebHome#PluginAPI]] specs for more information.

If your Plugin uses its own modules and objects, you must include the name of the Plugin in the package name. For example, write `Package MyFirstPlugin::Attrs;` instead of just `Package Attrs;`. Then call it using:

    use TWiki::Plugins::MyFirstPlugin::Attrs;
    $var = MyFirstPlugin::Attrs->new();

<a name="CreatePluginTopic"></a>

### <a name="Writing the Documentation Topic"></a> Writing the Documentation Topic

The Plugin documentation topic contains usage instructions and version details. It serves the Plugin files as %SYSTEMWEB%.FileAttachments for downloading. (The doc topic is also included _in_ the [[distribution package|Main/WebHome#CreatePluginPackage]].) To create a documentation topic:

1. **Copy** the Plugin topic template from TWiki.org. To copy the text, go to TWiki:Plugins/PluginPackage and:
  - enter the Plugin name in the "How to Create a Plugin" section
  - click Create
  - select all in the Edit box &amp; copy
  - Cancel the edit
  - go back to your site to the %SYSTEMWEB% web
  - In the [[GoBox]] enter your Plugin name, for example `MyFirstPlugin`, press enter and create the new topic
  - paste &amp; save new Plugin topic on your site
2. **Customize** your Plugin topic.
  - Important: In case you plan to publish your Plugin on TWiki.org, use Interwiki names for author names and links to TWiki.org topics, such as TWiki:Main/admin. This is important because links should work properly in a Plugin topic installed on any TWiki, not just on TWiki.org.
3. **Document** the performance data you gathered while [[measuring the performance|Main/WebHome#MeasurePerformance]]
4. **Save** your topic, for use in [[packaging|Main/WebHome#CreatePluginPackage]] and [[publishing|Main/WebHome#PublishPlugin]] your Plugin.

> **OUTLINE: Doc Topic Contents**
>
> <br />
>
> Check the Plugins web on TWiki.org for the latest Plugin doc topic template. Here's a quick overview of what's covered:
>
> **Syntax Rules:** &lt;_Describe any special text formatting that will be rendered._&gt;"
>
> **Example:** &lt;_Include an example of the Plugin in action. Possibly include a static HTML version of the example to compare if the installation was a success!_&gt;"
>
> **Plugin Settings:** &lt;_Description and settings for custom Plugin %VARIABLES%, and those required by TWiki._&gt;"
>
> - **Plugins Preferences** &lt;_If user settings are needed, explain... Entering values works exactly like %SYSTEMWEB%.TWikiPreferences and [[WebPreferences]]: six (6) spaces and then:_&gt;"
>   - **Set &lt;_EXAMPLE = value added_&gt;**
>
> **Plugin Installation Instructions:** &lt;_Step-by-step set-up guide, user help, whatever it takes to install and run, goes here._&gt;"
>
> **Plugin Info:** &lt;_Version, credits, history, requirements - entered in a form, displayed as a table. Both are automatically generated when you create or edit a page in the TWiki:Plugins web._&gt;"

<a name="CreatePluginPackage"></a>

### <a name="Packaging for Distribution"></a> Packaging for Distribution

The TWiki:Plugins.BuildContrib is a powerful build environment that is used by the TWiki project to build TWiki itself, as well as many of the Plugins. You don't **have** to use it, but it is highly recommended!

If you don't want (or can't) use the BuildContrib, then a minimum Plugin release consists of a Perl module with a [[WikiName]] that ends in `Plugin`, ex: `MyFirstPlugin.pm`, and a documentation page with the same name(`MyFirstPlugin.txt`).

1. Distribute the Plugin files in a directory structure that mirrors TWiki. If your Plugin uses additional files, include them all:
  - `lib/TWiki/Plugins/MyFirstPlugin.pm`
  - `data/TWiki/MyFirstPlugin.txt`
  - `pub/TWiki/MyFirstPlugin/uparrow.gif` [a required graphic]
2. Create a zip archive with the Plugin name (`MyFirstPlugin.zip`) and add the entire directory structure from Step 1. The archive should look like this:
  - `lib/TWiki/Plugins/MyFirstPlugin.pm`
  - `data/TWiki/MyFirstPlugin.txt`
  - `pub/TWiki/MyFirstPlugin/uparrow.gif`

<a name="MeasurePerformance"></a>

### <a name="Measuring and Improving the Plug"></a> Measuring and Improving the Plugin Performance

A high quality Plugin performs well. You can use the TWiki:Plugins.PluginBenchmarkAddOn to measure your TWiki:Plugins.PluginBenchmarks. The data is needed as part of the Documentation Topic.

See also [[Hints on Writing Fast Plugins|Main/WebHome#FastPluginHints]].

<a name="PublishPlugin"></a>

### <a name="Publishing for Public Use"></a> Publishing for Public Use

You can release your tested, packaged Plugin to the TWiki community through the TWiki:Plugins web. All Plugins submitted to TWiki.org are available for download and further development in TWiki:Plugins/PluginPackage.

Publish your Plugin by following these steps:

1. **Post** the Plugin documentation topic in the TWiki:Plugins/PluginPackage:
  - enter the Plugin name in the "How to Create a Plugin" section, for example `MyFirstPlugin`
  - paste in the topic text from [[Writing the Documentation Topic|Main/WebHome#CreatePluginTopic]] and save
2. **Attach** the distribution zip file to the topic, ex: `MyFirstPlugin.zip`
3. **Link** from the doc page to a new, blank page named after the Plugin, and ending in `Dev`, ex: `MyFirstPluginDev`. This is the discussion page for future development. (User support for Plugins is handled in TWiki:Support.)
4. **Put** the Plugin into the SVN repository, see TWiki:Plugins/ReadmeFirst (optional)

%N% Once you have done the above steps once, you can use the BuildContrib to upload updates to your Plugin.

Thank you very much for sharing your Plugin with the TWiki community :-)

<a name="RecommendedStorageOfPluginData"></a>

## <a name="Recommended Storage of Plugin Sp"></a> Recommended Storage of Plugin Specific Data

Plugins sometimes need to store data. This can be Plugin internal data such as cache data, or data generated for browser consumption such as images. Plugins should store data using [[TWikiFuncDotPm]] functions that support saving and loading of topics and attachments.

### <a name="Plugin Internal Data"></a> Plugin Internal Data

You can create a Plugin "work area" using the `TWiki::Func::getWorkArea()` function, which gives you a persistent directory where you can store data files. By default they will not be web accessible. The directory is guaranteed to exist, and to be writable by the webserver user. For convenience, `TWiki::Func::storeFile()` and `TWiki::Func::readFile()` are provided to persistently store and retrieve simple data in this area.

### <a name="Web Accessible Data"></a> Web Accessible Data

**_Topic-specific data_** such as generated images can be stored in the topic's attachment area, which is web accessible. Use the `TWiki::Func::saveAttachment()` function to store the data.

Recommendation for file name:

- Prefix the filename with an underscore (the leading underscore avoids a name clash with files attached to the same topic)
- Identify where the attachment originated from, typically by including the Plugin name in the file name
- Use only alphanumeric characters, underscores, dashes and periods to avoid platform dependency issues and URL issues
- Example: `_FooBarPlugin_img123.gif`

**_Web specific data_** can be stored in the Plugin's attachment area, which is web accessible. Use the `TWiki::Func::saveAttachment()` function to store the data.

Recommendation for file names in Plugin attachment area:

- Prefix the filename with an underscore
- Include the name of the web in the filename
- Use only alphanumeric characters, underscores, dashes and periods to avoid platform dependency issues and URL issues
- Example: `_Main_roundedge-ul.gif`

<a name="ConfigSpec"></a>

## <a name="Integrating with configure"></a> Integrating with `configure`

Some TWiki extensions have setup requirements that are best integrated into `configure` rather than trying to use TWiki preferences variables. These extensions use `Config.spec` files to publish their configuration requirements.

`Config.spec` files are read during TWiki configuration. Once a `Config.spec` has defined a configuration item, it is available for edit through the standard `configure` interface. `Config.spec` files are stored in the 'plugin directory' e.g. `lib/TWiki/Plugins/BathPlugin/Config.spec`.

### <a name="Structure of a Config.spec file"></a> Structure of a `Config.spec` file

The `Config.spec` file for a plugin starts with the plugin announcing what it is:

    # ---+ BathPlugin
    # This plugin senses the level of water in your bath, and ensures the plug
    # is not removed while the water is still warm.

This is followed by one or more configuration items. Each configuration item has a _type_, a _description_ and a _default_. For example:

    # **SELECT Plastic,Rubber,Metal**
    # Select the plug type
    $TWiki::cfg{BathPlugin}{PlugType} = 'Plastic';

    # **NUMBER**
    # Enter the chain length in cm
    $TWiki::cfg{BathPlugin}{ChainLength} = '30';

    # **BOOLEAN EXPERT**
    # Turn this option off to disable the water temperature alarm
    $TWiki::cfg{BathPlugin}{TempSensorEnabled} = '1';

The type (e.g. `**SELECT**` ) tells `configure` to how to prompt for the value. It also tells configure how to do some basic checking on the value you actually enter. All the comments between the type and the configuration item are taken as part of the description. The configuration item itself defines the default value for the configuration item. The above spec defines the configuration items `$TWiki::cfg{BathPlugin}{PlugType}`, `$TWiki::cfg{BathPlugin}{ChainLength}`, and `$TWiki::cfg{BathPlugin}{TempSensorEnabled}` for use in your plugin. For example,

    if( $TWiki::cfg{BathPlugin}{TempSensorEnabled} && $curTemperature > 50 ) {
        die "The bathwater is too hot for comfort";
    }

The config.spec file is read by configure, and `configure` then writes `LocalSite.cfg` with the values chosen by the local site admin.

A range of types are available for use in `Config.spec` files:

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <td> BOOLEAN </td>
    <td> A true/false value, represented as a checkbox </td>
  </tr>
  <tr>
    <td> COMMAND <em>length</em></td>
    <td> A shell command </td>
  </tr>
  <tr>
    <td> LANGUAGE </td>
    <td> A language (selected from <code>{LocalesDir}</code></td>
  </tr>
  <tr>
    <td> NUMBER </td>
    <td> A number </td>
  </tr>
  <tr>
    <td> OCTAL </td>
    <td> An octal number </td>
  </tr>
  <tr>
    <td> PASSWORD <em>length</em></td>
    <td> A password (input is hidden) </td>
  </tr>
  <tr>
    <td> PATH <em>length</em></td>
    <td> A file path </td>
  </tr>
  <tr>
    <td> PERL </td>
    <td> A perl structure, consisting of arrays and hashes </td>
  </tr>
  <tr>
    <td> REGEX <em>length</em></td>
    <td> A perl regular expression </td>
  </tr>
  <tr>
    <td> SELECT <em>choices</em></td>
    <td> Pick one of a range of choices </td>
  </tr>
  <tr>
    <td> SELECTCLASS <em>root</em></td>
    <td> Select a perl package (class) </td>
  </tr>
  <tr>
    <td> STRING <em>length</em></td>
    <td> A string </td>
  </tr>
  <tr>
    <td> URL <em>length</em></td>
    <td> A url </td>
  </tr>
  <tr>
    <td> URLPATH <em>length</em></td>
    <td> A relative URL path </td>
  </tr>
</table>

All types can be followed by a comma-separated list of _attributes_.

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <td> EXPERT </td>
    <td> means this an expert option </td>
  </tr>
  <tr>
    <td> M </td>
    <td> means the setting is mandatory (may not be empty) </td>
  </tr>
  <tr>
    <td> H </td>
    <td> means the option is not visible in <code>configure</code></td>
  </tr>
</table>

See `lib/TWiki.spec` for many more examples.

`Config.spec` files are also used for other (non-plugin) extensions. in this case they are stored under the `Contrib` directory instead of the `Plugins` directory.

<a name="MaintainPlugins"></a>

## <a name="Maintaining Plugins"></a> Maintaining Plugins

### <a name="Discussions and Feedback on Plug"></a> Discussions and Feedback on Plugins

Each published Plugin has a Plugin development topic on TWiki.org. Plugin development topics are named after your Plugin and end in `Dev`, such as `MyFirstPluginDev`. The Plugin development topic is a great resource to discuss feature enhancements and to get feedback from the TWiki community.

### <a name="Maintaining Compatibility with E"></a> Maintaining Compatibility with Earlier TWiki Versions

The Plugin interface ([[TWikiFuncDotPm]] functions and handlers) evolve over time. TWiki 4.0 introduced new API functions to address the needs of Plugin authors. It also deprecated some functions. Some Plugins written for earlier TWiki releases using unofficial TWiki internal functions no longer work on the TWiki 4.0 codebase. All this means that some Plugins need to be updated to work on the TWiki 4.0 codebase.

Organizations typically do not upgrade to the latest TWiki for many months. However, many administrators still would like to install the latest versions of a Plugin on their older TWiki installation. This need is fulfilled if Plugins are maintained in a compatible manner.

**_%T% Tip:_** Plugins can be written to be compatible with older and newer TWiki releases. This can be done also for Plugins using unofficial TWiki internal functions of an earlier release that no longer work on the latest TWiki codebase. TWiki:TWiki.TWikiPluginsSupplement#MaintainPlugins has more.

### <a name="Handling deprecated functions"></a> Handling deprecated functions

From time-to-time, the TWiki developers will add new functions to the interface (either to [[TWikiFuncDotPm]], or new handlers). Sometimes these improvements mean that old functions have to be deprecated to keep the code manageable. When this happens, the deprecated functions will be supported in the interface for at least one more TWiki release, and probably longer, though this cannot be guaranteed.

When a plugin defines deprecated handlers, a warning will be shown in the list generated by %FAILEDPLUGINS%. Admins who see these warnings should check TWiki.org and if necessary, contact the plugin author, for an updated version of the plugin.

Updated plugins may still need to define deprecated handlers for compatibility with old TWiki versions. In this case, the plugin package that defines old handlers can suppress the warnings in %FAILEDPLUGINS%.

This is done by defining a map from the handler name to the `TWiki::Plugins` version _in which the handler was first deprecated_. For example, if we need to define the `endRenderingHandler` for compatibility with `TWiki::Plugins` versions before 1.1, we would add this to the plugin:

    package TWiki::Plugins::SinkPlugin;
    use vars qw( %TWikiCompatibility );
    $TWikiCompatibility{endRenderingHandler} = 1.1;

If the currently-running TWiki version is 1.1 _or later_, then the _handler will not be called_ and _the warning will not be issued_. TWiki with versions of `TWiki::Plugins` before 1.1 will still call the handler as required.

**_Related Topics:_** [[DeveloperDocumentationCategory]], [[AdminDocumentationCategory]], TWiki:TWiki.TWikiPluginsSupplement
