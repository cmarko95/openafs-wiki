# <a name="TWiki Spreadsheet Plugin"></a> TWiki Spreadsheet Plugin

This Plugin adds speadsheet capabilities to %WIKITOOLNAME% topics. Formulae like <code>**%CALC\{"$INT(7/3)"\}%**</code> are evaluated at page view time. They can be placed in table cells and outside of tables. In other words, this Plugin provides general formula evaluation capability, not just classic spreadsheet functions.

<table>
  <tr>
    <td valign="top"><strong><em>Example:</em></strong><p>
      </p>
      <table border="1" cellpadding="0" cellspacing="0">
        <tr>
          <th bgcolor="#99CCCC"><strong> Region: </strong></th>
          <th bgcolor="#99CCCC"><strong> Sales: </strong></th>
        </tr>
        <tr>
          <td> Northeast </td>
          <td align="right"> 320 </td>
        </tr>
        <tr>
          <td> Northwest </td>
          <td align="right"> 580 </td>
        </tr>
        <tr>
          <td> South </td>
          <td align="right"> 240 </td>
        </tr>
        <tr>
          <td> Europe </td>
          <td align="right"> 610 </td>
        </tr>
        <tr>
          <td> Asia </td>
          <td align="right"> 220 </td>
        </tr>
        <tr>
          <td> Total: </td>
          <td align="right"> 1970 </td>
        </tr>
      </table>
      <p>
      </p>
    </td>
    <td>     </td>
    <td valign="top"><strong><em>Interactive example:</em></strong><p>
      </p>
      <form action="http://www.dementia.org/twiki//view/%WEB%/%TOPIC%" method="get" name="interactive"> Formula: <code>%CALC{"</code><input name="formula" size="30" type="text" value="$PROPERSPACE(admin)" /><code>"}%</code>   <input type="submit" value="Go" /><br /> Result:     admin <p>
        </p>
        <p>
        </p>
      </form>
    </td>
  </tr>
  <tr>
    <td colspan="3">
      <p> The formula next to "Total" is <code><b>%CALC{"$SUM( $ABOVE() )"}%</b></code>. <br /> (you see the formula instead of the sum in case the Plugin is not installed or not enabled.) </p>
      <p>
      </p>
    </td>
  </tr>
</table>

## <a name="Syntax Rules"></a> Syntax Rules

The action of this Plugin is triggered by the <code>**%CALC\{"..."\}%**</code> variable, which gets rendered according to the built-in function(s) found between the quotes.

- Built-in function are of format <code>**$FUNCNAME(parameter)**</code>
- Functions may be nested, e.g. <code>**%CALC\{"$SUM( R2:C$COLUMN(0)..R$ROW(-1):C$COLUMN(0) )"\}%**</code>
- Functions are evaluated from left to right, and from inside to outside if nested
- The function parameter can be text; a mathematical formula; a cell address; or a range of cell addresses
- Multiple parameters form a list; they are separated by a comma, followed by optional space, e.g. <code>**%CALC\{"$SUM( 3, 5, 7 )"\}%**</code>
- A table cell can be addressed as <code>**R1:C1**</code>. Table address matrix: <table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <td><code><b>R1:C1</b></code></td>
    <td><code><b>R1:C2</b></code></td>
    <td><code><b>R1:C3</b></code></td>
    <td><code><b>R1:C4</b></code></td>
  </tr>
  <tr>
    <td><code><b>R2:C1</b></code></td>
    <td><code><b>R2:C2</b></code></td>
    <td><code><b>R2:C3</b></code></td>
    <td><code><b>R2:C4</b></code></td>
  </tr>
</table>
- A table cell range is defined by two cell addresses separated by <code>**".."**</code>, e.g. "row 1 through 20, column 3" is: <code>**R1:C3..R20:C3**</code>
- Lists can refer to values and/or table cell ranges, e.g. <code>**%CALC\{"$SUM( 3, 5, $T(R1:C7), R1:C11..R1:C15 )"\}%**</code>
- Formulae can only reference cells in the current or preceeding row of the current table; they may not reference cells below the current table row
- Formulae can also be placed outside of tables; they can reference cells in the preceeding table

## <a name="Built-in Functions"></a> Built-in Functions

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <th bgcolor="#99CCCC"><strong> Function </strong></th>
    <th bgcolor="#99CCCC"><strong> Description </strong></th>
  </tr>
  <tr>
    <td><code><b>"$ABOVE()"</b></code></td>
    <td> The address range of cells above the current cell </td>
  </tr>
  <tr>
    <td><code><b>"$ABS(num)"</b></code></td>
    <td> The absolute value of a number. Example: <code><b>%CALC{"$ABS(-12.5)"}%</b></code> returns <code><b>12.5</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$AND(list)"</b></code></td>
    <td> The logcial AND of a list. Example: <code><b>%CALC{"$AND(1, 0, 1)"}%</b></code> returns <code><b>0</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$AVERAGE(list)"</b></code></td>
    <td> The average of a list or a range of cells. Example: To get the average of column 5 excluding the title row, write in the last row: <code><b>%CALC{"$AVERAGE( R2:C5..R$ROW(-1):C5 )"}%</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$CHAR(number)"</b></code></td>
    <td> The ASCII character represented by number. Example: <code><b>%CALC{"$CHAR(97)"}%</b></code> returns <code><b>a</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$CODE(text)"</b></code></td>
    <td> The ASCII numeric value of the first character in text. Example: <code><b>%CALC{"$CODE(abc)"}%</b></code> returns <code><b>97</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$COLUMN(offset)"</b></code></td>
    <td> The current column number with an optional offset </td>
  </tr>
  <tr>
    <td><code><b>"$COUNTITEMS(list)"</b></code></td>
    <td> Counts individual items in a list. Example: <code><b>%CALC{"$COUNTITEMS( $ABOVE() )"}%</b></code> returns <code><b>Closed: 1, Open: 2</b></code> assuming one cell above the current cell contains <code><b>Closed</b></code> and two cells contain <code><b>Open</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$COUNTSTR(list, str)"</b></code></td>
    <td> Counts the number of cells in a list equal to a given string (if str is specified), or counts the number of non empty cells in a list. Example: To count the number of non empty cells above the current cell, write <code><b>%CALC{"$COUNTSTR( $ABOVE() )"}%</b></code>; to count the number of cells equal to <code><b>DONE</b></code>, write <code><b>%CALC{"$COUNTSTR( $ABOVE(), DONE )"}%</b></code>; </td>
  </tr>
  <tr>
    <td><code><b>"$DEF(list)"</b></code></td>
    <td> Returns the first list item or cell reference that is not empty. Example: <code><b>%CALC{"$DEF( R1:C1..R1:C3 )"}%</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$EVAL(formula)"</b></code></td>
    <td> Evaluates a simple formula. Only addition, substraction, multiplication, division and modulus of numbers are supported. Any nesting is permitted. Example: <code><b>%CALC{"$EVAL( (5 * 3) / 2 + 1.1 )"}%</b></code> returns <code><b>8.6</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$EXACT(text1, text2)"</b></code></td>
    <td> Compares two text strings and returns <code><b>1</b></code> if they are exactly the same, or <code><b>0</b></code> if not. Example: <code><b>%CALC{"$EXACT( foo, Foo )"}%</b></code> returns <code><b>0</b></code>; <code><b>%CALC{"$EXACT( foo, $LOWER(Foo) )"}%</b></code> returns <code><b>1</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$FIND(search_string, text, start_index)"</b></code></td>
    <td> Finds one text string <code>search_string</code>, within another text string <code>text</code>, and returns the number of the starting position of <code>search_string</code>, from the first character of <code>text</code>. This search is case sensitive and is not a regular expression search; use <code>$SEARCH()</code> for regular expression searching. Starting position is 1; a 0 is returned if nothing is matched. Examples: %BR% <code><b>%CALC{"$FIND(f, fluffy)"}%</b></code> returns <code><b>1</b></code> %BR% <code><b>%CALC{"$FIND(f, fluffy, 2)"}%</b></code> returns <code><b>4</b></code> %BR% <code><b>%CALC{"$FIND(@, fluffy, 1)"}%</b></code> returns <code><b>0</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$FORMAT(type, prec, number)"</b></code></td>
    <td> Formats a number to a certain type and precision. Types with examples:<br />  - <code><b>%CALC{"$FORMAT( COMMA, 2, 12345.6789 )"}%</b></code> returns <code><b>12,345.68</b></code><br />  - <code><b>%CALC{"$FORMAT( DOLLAR, 2, 12345.67 )"}%</b></code> returns <code><b>$12,345.68</b></code><br />  - <code><b>%CALC{"$FORMAT( NUMBER, 1, 12345.67 )"}%</b></code> returns <code><b>12345.7</b></code><br />  - <code><b>%CALC{"$FORMAT( PERCENT, 1, 0.1234567 )"}%</b></code> returns <code><b>12.3%</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$FORMATTIME(serial, text)"</b></code></td>
    <td> Convert a serialized date into a date string; the following variables in text are expanded: <code>$second</code> (seconds, 00..59); <code>$minute</code> (minutes, 00..59); <code>$hour</code> (hours, 00..23); <code>$day</code> (day of month, 01..31); <code>$month</code> (month, 01..12); <code>$mon</code> (month in text format, Jan..Dec); <code>$year</code> (4 digit year, 1999); <code>$ye</code> (2 digit year, 99), <code>$wd</code> (day number of the week, 1 for Sunday, 2 for Monday, etc), <code>$wday</code> (day of the week, Sun..Sat), <code>$weekday</code> (day of the week, Sunday..Saturday), <code>$yearday</code> (day of the year, 1..365, or 1..366 in leap years). Date is assumed to be server time; add <code>GMT</code> to indicate Greenwich time zone. See also <code>$TIME()</code>, <code>$TODAY()</code>, <code>$FORMATGMTIME()</code>, <code>$TIMEDIFF()</code>. Example: <code><b>%CALC{"$FORMATTIME(0, $year/$month/$day GMT)"}%</b></code> returns <code><b>1970/01/01 GMT</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$FORMATGMTIME(serial, text)"</b></code></td>
    <td> Convert a serialized date into a date string in Greenwich time zone. Same variables expansion as in <code>$FORMATTIME()</code>. Example: <code><b>%CALC{"$FORMATGMTIME(1041379200, $day $mon $year)"}%</b></code> returns <code><b>01 Jan 2003</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$GET(name)"</b></code></td>
    <td> Get the value of a previously set variable. Specify the variable name (alphanumeric characters and underscores). An empty string is returned if the variable does not exist. Use <code>$SET()</code> to set a variable first. Unlike table ranges, variables live for the time of the page view and persist across tables, i.e. you can use it to summarize results across several tables. See also <code>$SET()</code>. Example: <code><b>%CALC{"$GET(my_total)"}%</b></code> returns the value of the <code>my_total</code> variable </td>
  </tr>
  <tr>
    <td><code><b>"$IF(condition, value if true, value if 0)"</b></code></td>
    <td> Returns one value if a condition is met, and another value if not. The condition can be a number (where <code><b>0</b></code> means condition not met), or two numbers with a comparison operator <code><b>&lt;</b></code> (less than), <code><b>&lt;=</b></code> (less than or equal), <code><b>==</b></code> (equal), <code><b>!=</b></code> (not equal), <code><b>&gt;=</b></code> (greater than or equal), <code><b>&gt;</b></code> (greater than). Examples:%BR% <code><b>%CALC{"$IF( $T(R1:C5) &gt; 1000, Over Budget, OK)"}%</b></code> returns <code><b>Over Budget</b></code> if value in R1:C5 is over 1000, <code><b>OK</b></code> if not%BR% <code><b>%CALC{"$IF( $EXACT($T(R1:C2),), empty, $T(R1:C2))"}%</b></code> returns the content of R1:C2 or <code><b>empty</b></code> if empty%BR% <code><b>%CALC{"$SET(val, $IF( $T(R1:C2) == 0, zero, $T(R1:C2)))"}%</b></code> sets a variable conditionally </td>
  </tr>
  <tr>
    <td><code><b>"$INT(formula)"</b></code></td>
    <td> Evaluates a simple formula and rounds the result down to the nearest integer. Example: <code><b>%CALC{"$INT(10 / 4)"}%</b></code> returns <code><b>2</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$LEFT()"</b></code></td>
    <td> The address range of cells to the left of the current cell </td>
  </tr>
  <tr>
    <td><code><b>"$LENGTH(text)"</b></code></td>
    <td> The length in bytes of text. Example: <code><b>%CALC{"$LENGTH(abcd)"}%</b></code> returns <code><b>4</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$LIST(range)"</b></code></td>
    <td> Converts the content of a range of cells into a flat list, delimited by comma. Cells containing commas are merged into the list. Example: <code><b>%CALC{"$LIST( $LEFT() )"}%</b></code> returns <code><b>Apples, Lemons, Oranges, Kiwis</b></code> assuming the cells to the left contain <code><b>| Apples | Lemons, Oranges | Kiwis |</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$LISTIF(condition, list)"</b></code></td>
    <td> Remove elements from a list that do not meet a condition. In addition to the condition described in <code>$IF()</code>, you can use <code><b>$item</b></code> to indicate the current element, and <code><b>$index</b></code> for the list index, starting at 1. Examples: %BR% <code><b>%CALC{"$LISTIF($item &gt; 12, 14, 7, 25)"}%</b></code> returns <code><b>14, 25</b></code> %BR% <code><b>%CALC{"$LISTIF($NOT($EXACT($item,)), A, B, , E)"}%</b></code> returns non-empty elements <code><b>A, B, E</b></code> %BR% <code><b>%CALC{"$LISTIF($index &gt; 2, A, B, C, D)"}%</b></code> returns <code><b>C, D</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$LISTITEM(index, list)"</b></code></td>
    <td> Get one element of a list. Index is 1 to size of list; use a negative number to count from the end of the list. Examples:%BR% <code><b>%CALC{"$LISTITEM(2, Apple, Orange, Apple, Kiwi)"}%</b></code> returns <code><b>Orange</b></code> %BR% <code><b>%CALC{"$LISTITEM(-1, Apple, Orange, Apple, Kiwi)"}%</b></code> returns <code><b>Kiwi</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$LISTMAP(formula, list)"</b></code></td>
    <td> Evaluate and update each element of a list. In the formula you can use <code><b>$item</b></code> to indicate the element; <code><b>$index</b></code> to show the index of the list, starting at 1. Example: <code><b>%CALC{"$LISTMAP($index: $EVAL(2 * $item), 3, 5, 7, 11)"}%</b></code> returns <code><b>1: 6, 2: 10, 3: 14, 4: 22</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$LISTREVERSE(list)"</b></code></td>
    <td> The opposite order of a list. Example: <code><b>%CALC{"$LISTREVERSE(Apple, Orange, Apple, Kiwi)"}%</b></code> returns <code><b>Kiwi, Apple, Orange, Apple</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$LISTSIZE(list)"</b></code></td>
    <td> The number of elements in a list. Example: <code><b>%CALC{"$LISTSIZE(Apple, Orange, Apple, Kiwi)"}%</b></code> returns <code><b>4</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$LISTSORT(list)"</b></code></td>
    <td> Sorts a list in ASCII order, or numerically if all elements are numeric. Example: <code><b>%CALC{"$LISTSORT(Apple, Orange, Apple, Kiwi)"}%</b></code> returns <code><b>Apple, Apple, Kiwi, Orange</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$LISTUNIQUE(list)"</b></code></td>
    <td> Removes all duplicates from a list. Example: <code><b>%CALC{"$LISTUNIQUE(Apple, Orange, Apple, Kiwi)"}%</b></code> returns <code><b>Apple, Orange, Kiwi</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$LOWER(text)"</b></code></td>
    <td> The lower case string of a text. Example: <code><b>%CALC{"$LOWER( $T(R1:C5) )"}%</b></code> returns the lower case string of the text in cell <code><b>R1:C5</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$MAX(list)"</b></code></td>
    <td> The biggest value of a list or range of cells. Example: To find the biggest number to the left of the current cell, write: <code><b>%CALC{"$MAX( $LEFT() )"}%</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$MEDIAN(list)"</b></code></td>
    <td> The median of a list or range of cells. Example: <code><b>%CALC{"$MEDIAN(3, 9, 4, 5)"}%</b></code> returns <code><b>4.5</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$MIN(list)"</b></code></td>
    <td> The smallest value of a list or range of cells. Example: <code><b>%CALC{"$MIN(15, 3, 28)"}%</b></code> returns <code><b>3</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$MOD(num, divisor)"</b></code></td>
    <td> The reminder after dividing <code><b>num</b></code> by <code><b>divisor</b></code>. Example: <code><b>%CALC{"$MOD(7, 3)"}%</b></code> returns <code><b>1</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$NOP(text)"</b></code></td>
    <td> A no-operation. Allows one to defy the order of Plugin execution. For example, it will allow preprossing to be done before <code>%SEARCH{}%</code> is evaluated. Use <code>$per</code> to escape '%'. </td>
  </tr>
  <tr>
    <td><code><b>"$NOT(num)"</b></code></td>
    <td> The reverse logic of a number. Returns 0 if <code><b>num</b></code> is not zero, 1 if zero. Example: <code><b>%CALC{"$NOT(0)"}%</b></code> returns <code><b>1</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$OR(list)"</b></code></td>
    <td> The logcial OR of a list. Example: <code><b>%CALC{"$OR(1, 0, 1)"}%</b></code> returns <code><b>1</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$PRODUCT(list)"</b></code></td>
    <td> The product of a list or range of cells. Example: to calculate the product of the cells to the left of the current one use <code><b>%CALC{"$PRODUCT($LEFT())"}%</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$PROPER(text)"</b></code></td>
    <td> Capitalizes letters in <code><b>text</b></code> that follow any character other than a letter. Converts all other letters to lowercase letters. Examples:%BR% <code><b>%CALC{"PROPER(a small STEP)"}%</b></code> returns <code><b>A Small Step</b></code> %BR% <code><b>%CALC{"PROPER(f1 (formula-1))"}%</b></code> returns <code><b>F1 (Formula 1)</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$PROPERSPACE(text)"</b></code></td>
    <td> Properly spaces out [[TWiki/WikiWords]] preceeded by white space, parenthesis, or <code><b>][</b></code>. Words listed in the DONTSPACE [[TWiki/TWikiPreferences]] variable or DONTSPACE Plugins setting are excluded. Example, assuming DONTSPACE contains McIntosh: <code><b>%CALC{"PROPERSPACE(Old MacDonald had a ServerFarm, EeEyeEeEyeOh"}%</b></code> returns <code><b>Old MacDonald had a Server Farm, Ee Eye Ee Eye Oh</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$RAND(max)"</b></code></td>
    <td> Random number, evenly distributed between 0 and <code><b>max</b></code>, or 0 and 1 if max is not specified. </td>
  </tr>
  <tr>
    <td><code><b>"$REPEAT(text)"</b></code></td>
    <td> Repeat <code><b>text</b></code> a number of times. Example: <code><b>%CALC{"$REPEAT(/\, 5)"}%</b></code> returns <code><b>/\/\/\/\/\</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$REPLACE(text, start_num, num_chars, new_text)"</b></code></td>
    <td> Replaces part of text string <code>text</code>, based on the starting position <code>start_num</code>, and the number of characters to replace <code>num_chars</code>. The characters are replaced with <code>new_text</code>. Starting position is 1; use a negative <code>start_num</code> to count from the end of the text. See also <code>$SUBSTITUTE()</code>, <code>$TRANSLATE()</code>. Example: %BR% <code><b>%CALC{"$REPLACE(abcdefghijk,6,5,*)"}%</b></code> returns <code><b>abcde*k</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$RIGHT()"</b></code></td>
    <td> The address range of cells to the right of the current cell </td>
  </tr>
  <tr>
    <td><code><b>"$ROUND(formula, digits)"</b></code></td>
    <td> Evaluates a simple <code><b>formula</b></code> and rounds the result up or down to the number of digits if <code><b>digits</b></code> is positive; to the nearest integer if digits is missing; or to the left of the decimal point if digits is negative. Examples: %BR% <code><b>%CALC{"$ROUND(3.15, 1)"}%</b></code> returns <code><b>3.2</b></code> %BR% <code><b>%CALC{"$ROUND(3.149, 1)"}%</b></code> returns <code><b>3.1</b></code> %BR% <code><b>%CALC{"$ROUND(-2.475, 2)"}%</b></code> returns <code><b>-2.48</b></code> %BR% <code><b>%CALC{"$ROUND(34.9, -1)"}%</b></code> returns <code><b>30</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$ROW(offset)"</b></code></td>
    <td> The current row number with an offset. Example: To get the number of rows excluding table heading ( first row) and summary row (last row you are in), write: <code><b>%CALC{"$ROW(-2)"}%</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$SEARCH(search_string, text, start_index)"</b></code></td>
    <td> Finds one text string <code>search_string</code>, within another text string <code>text</code>, and returns the number of the starting position of <code>search_string</code>, from the first character of <code>text</code>. This search a [[TWiki/RegularExpression]] search; use <code>$FIND()</code> for non-regular expression searching. Starting position is 1; a 0 is returned if nothing is matched. Examples: %BR% <code><b>%CALC{"$SEARCH([uy], fluffy)"}%</b></code> returns <code><b>3</b></code> %BR% <code><b>%CALC{"$SEARCH([uy], fluffy, 3)"}%</b></code> returns <code><b>6</b></code> %BR% <code><b>%CALC{"$SEARCH([abc], fluffy,)"}%</b></code> returns <code><b>0</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$SET(name, value)"</b></code></td>
    <td> Set a variable for later use. Specify the variable name (alphanumeric characters and underscores) and the value. The value may contain a formula; formulas are evaluated before the variable assignment. This function returns no output. Use <code>$GET()</code> to retrieve variables. Unlike table ranges, variables live for the time of the page view and persist across tables, i.e. you can use it to summarize results across several tables. See also <code>$GET()</code>. Example: <code><b>%CALC{"$SET( my_total, $SUM($ABOVE()) )"}%</b></code> sets the <code>my_total</code> variable to the sum of all table cells located above the current cell and returns an empty string </td>
  </tr>
  <tr>
    <td><code><b>"$SETM(name, formula)"</b></code></td>
    <td> Updates an existing variable based on a formula. Specify the variable name (alphanumeric characters and underscores) and the formula. The formula must start with an operator to <code><b>+</b></code> (add), <code><b>-</b></code> (subtract), <code><b>*</b></code> (multiply), or <code><b>/</b></code> (divide) something to the variable. This function returns no output. Use <code>$GET()</code> to retrieve variables. Example: <code><b>%CALC{"$SETM( total, + $SUM($LEFT()) )"}%</b></code> adds the sum of all table cells on the left to the <code>total</code> variable, and returns an empty string </td>
  </tr>
  <tr>
    <td><code><b>"$SIGN(num)"</b></code></td>
    <td> The sign of a number. Returns -1 if <code><b>num</b></code> is negative, 0 if zero, or 1 if positive. Example: <code><b>%CALC{"$SIGN(-12.5)"}%</b></code> returns <code><b>-1</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$SUBSTITUTE(text, old, new, instance, option)"</b></code></td>
    <td> Substitutes <code>new</code> text for <code>old</code> text in a <code>text</code> string. <code>instance</code> specifies which occurance of <code>old</code> you want to replace. If you specify <code>instance</code>, only that instance is replaced. Otherwise, every occurance is changed to the new text. A literal search is performed by default; a [[TWiki/RegularExpression]] search if the <code>option</code> is set to <code><b>r</b></code>. See also <code>$REPLACE()</code>, <code>$TRANSLATE()</code>. Examples: %BR% <code><b>%CALC{"$SUBSTITUTE(Good morning, morning, day)"}%</b></code> returns <code><b>Good day</b></code> %BR% <code><b>%CALC{"$SUBSTITUTE(Q2-2002,2,3)"}%</b></code> returns <code><b>Q3-3003</b></code> %BR% <code><b>%CALC{"$SUBSTITUTE(Q2-2002,2,3,3)"}%</b></code> returns <code><b>Q2-2003</b></code> %BR% <code><b>%CALC{"$SUBSTITUTE(abc123def,[0-9],9,,r)"}%</b></code> returns <code><b>abc999def</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$SUM(list)"</b></code></td>
    <td> The sum of a list or range of cells. Example: To sum up column 5 excluding the title row, write: <code><b>%CALC{"$SUM( R2:C5..R$ROW(-1):C5 )"}%</b></code> in the last row; or simply <code><b>%CALC{"$SUM( $ABOVE() )"}%</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$SUMDAYS(list)"</b></code></td>
    <td> The total number of days in a list or range of cells containing numbers of hours, days or weeks. The default unit is days; units are indicated by a <code><b>h</b></code>, <code><b>hours</b></code>, <code><b>d</b></code>, <code><b>days</b></code>, <code><b>w</b></code>, <code><b>weeks</b></code> suffix. One week is assumed to have 5 working days, one day 8 hours. Example: <code><b>%CALC{"$SUMDAYS( 2w, 1, 2d, 4h )"}%</b></code> returns <code><b>13.5</b></code>, the evaluation of <code>(2*5 + 1 + 2 + 4/8)</code></td>
  </tr>
  <tr>
    <td><code><b>"$SUMPRODUCT(list, list, ...)"</b></code></td>
    <td> The scalar product on ranges of cells. Example: <code><b>%CALC{"$SUM( R2:C1..R4:C1, R2:C5..R4:C5 )"}%</b></code> evaluates and returns <code><b>($T(R2:C1) * $T(R2:C5) + $T(R3:C1) * $T(R3:C5) + $T(R4:C1) * $T(R4:C5))</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$T(address)"</b></code></td>
    <td> The content of a cell. Example: <code><b>%CALC{"$T(R1:C5)"}%</b></code> returns the text in cell <code><b>R1:C5</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$TRANSLATE(text, from, to)"</b></code></td>
    <td> Translate text from a set of characters to another set, one character by one. The <code>text</code> may contain commas; the last two comma separated parameters are required. For <code>from</code> and <code>to</code> parameters, you can write <code>$comma</code> to escape comma, <code>$sp</code> to escape space. See also <code>$REPLACE()</code>, <code>$SUBSTITUTE()</code>. Examples: %BR% <code><b>%CALC{"$TRANSLATE(boom,bm,cl)"}%</b></code> returns <code><b>cool</b></code> %BR% <code><b>%CALC{"$TRANSLATE(one, two,$comma,;)"}%</b></code> returns <code><b>one; two</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$TIME(text)"</b></code></td>
    <td> Converts a date string into a serialized date number (seconds since the Epoch, e.g. midnight, 01 Jan 1970). Current time is taken if the date string is empty. Supported date formats: <code>31 Dec 2009</code>; <code>31 Dec 2009 GMT</code>; <code>31 Dec 09</code>; <code>31-Dec-2009</code>; <code>31/Dec/2009</code>; <code>2009/12/31</code>; <code>2009-12-31</code>; <code>2009/12/31</code>; <code>2009/12/31 23:59</code>; <code>2009/12/31 - 23:59</code>; <code>2009-12-31-23-59</code>; <code>2009/12/31 - 23:59:59</code>; <code>2009.12.31.23.59.59</code>. Date is assumed to be server time; add <code>GMT</code> to indicate Greenwich time zone. See also <code>$TODAY()</code>, <code>$FORMATTIME()</code>, <code>$FORMATGMTIME()</code>, <code>$TIMEDIFF()</code>. Example: <code><b>%CALC{"$TIME( 2003/10/14 GMT )"}%</b></code> returns <code><b>1066089600</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$TIMEADD( serial, value, unit )"</b></code></td>
    <td> Add a value to a serialized date. The unit is seconds if not specified; unit can be <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>. Note: An approximation is used for month and year calculations. See also <code>$TIME()</code>, <code>$TIMEDIFF()</code>, <code>$TODAY()</code>, <code>$FORMATTIME()</code>. Example: <code><b>%CALC{"$TIMEADD( $TIME(), 2, week )"}%</b></code> returns the serialized date two weeks from now </td>
  </tr>
  <tr>
    <td><code><b>"$TIMEDIFF( serial_1, serial_2, unit )"</b></code></td>
    <td> Time difference between two serialized dates. The unit is seconds if not specified; unit can be specified as in <code>$TIMEADD()</code>. Note: An approximation is used for month and year calculations. Use <code>$FORMAT()</code> or <code>$INT()</code> to format real numbers. See also <code>$TIME()</code>, <code>$TIMEADD()</code>, <code>$TODAY()</code>, <code>$FORMATTIME()</code>. Example: <code><b>%CALC{"$TIMEDIFF( $TIME(), $EVAL($TIME()+90), minute )"}%</b></code> returns <code><b>1.5</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$TODAY()"</b></code></td>
    <td> Get the serialized date of today at midnight GMT. The related <code>$TIME()</code> returns the serialized date of today at the current time, e.g. it includes the number of seconds since midnight GMT. See also <code>$FORMATTIME()</code>, <code>$FORMATGMTIME()</code>, <code>$TIMEDIFF()</code>. Example: <code><b>%CALC{"$TODAY()"}%</b></code> returns the number of seconds since Epoch </td>
  </tr>
  <tr>
    <td><code><b>"$TRIM(text)"</b></code></td>
    <td> Removes all spaces from text except for single spaces between words. Example: <code><b>%CALC{"$TRIM( eat  spaces  )"}%</b></code> returns <code><b>eat spaces</b></code>. </td>
  </tr>
  <tr>
    <td><code><b>"$UPPER(text)"</b></code></td>
    <td> The upper case string of a text. Example: <code><b>%CALC{"$UPPER( $T(R1:C5) )"}%</b></code> returns the upper case string of the text in cell <code><b>R1:C5</b></code></td>
  </tr>
  <tr>
    <td><code><b>"$VALUE(text)"</b></code></td>
    <td> Extracts a number from <code><b>text</b></code>. Returns <code><b>0</b></code> if not found. Examples:%BR% <code><b>%CALC{"$VALUE(US$1,200)"}%</b></code> returns <code><b>1200</b></code> %BR% <code><b>%CALC{"$VALUE(PrjNotebook1234)"}%</b></code> returns <code><b>1234</b></code> %BR% <code><b>%CALC{"$VALUE(Total: -12.5)"}%</b></code> returns <code><b>-12.5</b></code></td>
  </tr>
</table>

## <a name="Bug Tracking Example"></a> Bug Tracking Example

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <th bgcolor="#99CCCC"><strong> Bug#: </strong></th>
    <th bgcolor="#99CCCC"><strong> Priority: </strong></th>
    <th bgcolor="#99CCCC"><strong> Subject: </strong></th>
    <th bgcolor="#99CCCC"><strong> Status: </strong></th>
    <th bgcolor="#99CCCC"><strong> Days to fix </strong></th>
  </tr>
  <tr>
    <td> Bug:1231 </td>
    <td> Low </td>
    <td> File Open ... </td>
    <td> Open </td>
    <td align="right"> 3 </td>
  </tr>
  <tr>
    <td> Bug:1232 </td>
    <td> High </td>
    <td> Memory Window ... </td>
    <td> Fixed </td>
    <td align="right"> 2 </td>
  </tr>
  <tr>
    <td> Bug:1233 </td>
    <td> Medium </td>
    <td> Usability issue ... </td>
    <td> Assigned </td>
    <td align="right"> 5 </td>
  </tr>
  <tr>
    <td> Bug:1234 </td>
    <td> High </td>
    <td> No arrange ... </td>
    <td> Fixed </td>
    <td align="right"> 1 </td>
  </tr>
  <tr>
    <td> Total: 4 </td>
    <td> High: 2<br /> Low: 1<br /> Medium: 1 </td>
    <td> . </td>
    <td> Assigned: 1<br /> Fixed: 2<br /> Open: 1 </td>
    <td align="right"> Total: 11 </td>
  </tr>
</table>

The last row is defined as:

    | Total: %CALC{"$ROW(-2)"}% \
      | %CALC{"$COUNTITEMS( R2:C$COLUMN()..R$ROW(-1):C$COLUMN() )"}% | . \
      | %CALC{"$COUNTITEMS( R2:C$COLUMN()..R$ROW(-1):C$COLUMN() )"}% \
      |  Total: %CALC{"$SUM( R2:C$COLUMN()..R$ROW(-1):C$COLUMN() )"}% |

Above table is created manually. Another Plugin could build the table dynamically, e.g. by pulling data out of a bug tracking system. The Spreadsheet Plugin can be used to display table data statistics.

## <a name="Plugin Settings"></a> Plugin Settings

Plugin settings are stored as preferences variables. To reference a plugin setting write <code>**%&lt;plugin&gt;\_&lt;setting&gt;%**</code>, i.e. <code>**%SPREADSHEETPLUGIN\_SHORTDESCRIPTION%**</code>

- One line description, is shown in the [[TextFormattingRules]] topic:
  - Set SHORTDESCRIPTION = Add spreadsheet calculation like `"$SUM( $ABOVE() )"` to tables located in %WIKITOOLNAME% topics.

- Debug plugin: (See output in `data/debug.txt`)
  - Set DEBUG = 0

- Do not handle `%CALC{}%` tag in included topic while including topic: (default: 1)
  - Set SKIPINCLUDE = 1

- [[WikiWords|TWiki/WikiWord]] to exclude from being spaced out by the <code>**$PROPERSPACE(text)**</code> function. This comma delimited list can be overloaded by a DONTSPACE preferences variable:
  - Set DONTSPACE = CodeWarrior, MacDonald, McIntosh, RedHat, SuSE

## <a name="Plugin Installation Instructions"></a> Plugin Installation Instructions

**_Note:_** You do not need to install anything on the browser to use this plugin. Below installation instructions are for the administrator who needs to install this plugin on the TWiki server.

- Download the ZIP file from the %TOPIC% home
- Unzip <code>**SpreadSheetPlugin.zip**</code> in your twiki installation directory. Content: <table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <th bgcolor="#99CCCC"><strong> File: </strong></th>
    <th bgcolor="#99CCCC"><strong> Description: </strong></th>
  </tr>
  <tr>
    <td><code><b>data/TWiki/%TOPIC%.txt</b></code></td>
    <td> Plugin topic </td>
  </tr>
  <tr>
    <td><code><b>data/TWiki/%TOPIC%.txt,v</b></code></td>
    <td> Plugin topic repository </td>
  </tr>
  <tr>
    <td><code><b>lib/TWiki/Plugins/%TOPIC%.pm</b></code></td>
    <td> Plugin Perl module </td>
  </tr>
</table>
- Test if the "Total" in the first table in this topic is correct.

## <a name="Plugin Info"></a> Plugin Info

<table border="1" cellpadding="0" cellspacing="0">
  <tr>
    <td align="right"> Plugin Author: </td>
    <td> TWiki:Main/PeterThoeny </td>
  </tr>
  <tr>
    <td align="right"> Plugin Version: </td>
    <td> 03 Apr 2004 </td>
  </tr>
  <tr>
    <td align="right"> Change History: </td>
    <td>  </td>
  </tr>
  <tr>
    <td align="right"> 03 Apr 2004: </td>
    <td> Added $ABS(), $LISTIF(); fixed $VALUE() to remove leading zeros; changed $FIND() and $SEARCH() to return 0 instead of empty string if no match </td>
  </tr>
  <tr>
    <td align="right"> 21 Mar 2004: </td>
    <td> Added $LISTITEM(); fixed call to unofficial function </td>
  </tr>
  <tr>
    <td align="right"> 16 Mar 2004: </td>
    <td> Added $LISTMAP(), $LISTREVERSE(), $LISTSIZE(), $LISTSORT(), $LISTUNIQUE(), $SETM(); retired $COUNTUNIQUE() in favor of $COUNTITEMS($LISTUNIQUE()); fixed evaluation order issue of $IF(); fixed missing eval error messages suppressed since version 06 Mar 2004; redirect stderr messages to warning </td>
  </tr>
  <tr>
    <td align="right"> 08 Mar 2004: </td>
    <td> Added $LIST() </td>
  </tr>
  <tr>
    <td align="right"> 06 Mar 2004: </td>
    <td> Added $AND(), $MOD(), $NOT(), $OR(), $PRODUCT(), $PROPER(), $PROPERSPACE(), $RAND(), $REPEAT(), $SIGN(), $VALUE(); added digits parameter to $ROUND(); renamed $MULT() to $PRODUCT(); $MULT() is deprecated and undocumented </td>
  </tr>
  <tr>
    <td align="right"> 27 Feb 2004: </td>
    <td> Added $COUNTUNIQUE() </td>
  </tr>
  <tr>
    <td align="right"> 24 Oct 2003: </td>
    <td> Added $SET(), $GET(), $MEDIAN(); added $SUMPRODUCT(), inspired by TWiki:Main/RobertWithrow; added $SUMDAYS(), contributed by TWiki:Main/SvenDowideit </td>
  </tr>
  <tr>
    <td align="right"> 21 Oct 2003: </td>
    <td> Added support for lists <code>(1, 2, 3)</code> and lists of table ranges <code>(R1:C1..R1:C5, R3:C1..R3:C5)</code> for all functions that accept a table range; added $TIMEADD(); in $TIMEDIFF() added week unit; in $FORMATTIME() changed $weekday to $wd and added $wday and $weekday </td>
  </tr>
  <tr>
    <td align="right"> 14 Oct 2003: </td>
    <td> Added $TIME(), $TODAY(), $FORMATTIME(), $FORMATGMTIME(), $TIMEDIFF() </td>
  </tr>
  <tr>
    <td align="right"> 13 Oct 2003: </td>
    <td> Added $MULT(), contributed by TWiki:Main/GerritJanBaarda </td>
  </tr>
  <tr>
    <td align="right"> 30 Jul 2003: </td>
    <td> Added $TRANSLATE() </td>
  </tr>
  <tr>
    <td align="right"> 19 Jul 2003: </td>
    <td> Added $FIND(), $NOP(), $REPLACE(), $SEARCH(), $SUBSTITUTE(), contributed by TWiki:Main/PaulineCheung </td>
  </tr>
  <tr>
    <td align="right"> 19 Apr 2003: </td>
    <td> Added $COUNTSTR(), $EXACT(), $IF(), $ROUND(), $TRIM(); added $FORMAT(), contributed by TWiki:Main/JimStraus; support <code>%</code> modulus operator in $EVAL, $INT, and $ROUND; fixed bug in $DEF </td>
  </tr>
  <tr>
    <td align="right"> 07 Jun 2002: </td>
    <td> Added $DEF(), contributed by TWiki:Main/MartinFuzzey; allow values with HTML formatting like <code>&lt;u&gt;102&lt;/u&gt;</code>, suggested by TWiki:Main/GladeDiviney; added SKIPINCLUDE setting </td>
  </tr>
  <tr>
    <td align="right"> 12 Mar 2002: </td>
    <td> Support for multiple functions per nesting level </td>
  </tr>
  <tr>
    <td align="right"> 15 Jan 2002: </td>
    <td> Added $CHAR(), $CODE() and $LENGTH() </td>
  </tr>
  <tr>
    <td align="right"> 12 Nov 2001: </td>
    <td> Added $RIGHT() </td>
  </tr>
  <tr>
    <td align="right"> 12 Aug 2001: </td>
    <td> Fixed bug of disappearing multi-column cells </td>
  </tr>
  <tr>
    <td align="right"> 19 Jul 2001: </td>
    <td> Fixed incorrect $SUM calculation of cell with value <code>0</code></td>
  </tr>
  <tr>
    <td align="right"> 14 Jul 2001: </td>
    <td> Changed to plug &amp; play </td>
  </tr>
  <tr>
    <td align="right"> 01 Jun 2001: </td>
    <td> Fixed insecure dependencies for $MIN and $MAX </td>
  </tr>
  <tr>
    <td align="right"> 16 Apr 2001: </td>
    <td> Fixed div by 0 bug in $AVERAGE </td>
  </tr>
  <tr>
    <td align="right"> 17 Mar 2001: </td>
    <td> Initial version </td>
  </tr>
  <tr>
    <td align="right"> CPAN Dependencies: </td>
    <td> none </td>
  </tr>
  <tr>
    <td align="right"> TWiki:Plugins/Benchmark: </td>
    <td>[[TWiki/GoodStyle]] 99%, [[TWiki/FormattedSearch]] 99%, %TOPIC% 95% </td>
  </tr>
  <tr>
    <td align="right"> Other Dependencies: </td>
    <td> none </td>
  </tr>
  <tr>
    <td align="right"> Perl Version: </td>
    <td> 5.000 and up </td>
  </tr>
  <tr>
    <td align="right"> Plugin Home: </td>
    <td><a href="http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%" target="_top">http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%</a></td>
  </tr>
  <tr>
    <td align="right"> Feedback: </td>
    <td><a href="http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Dev" target="_top">http://TWiki.org/cgi-bin/view/Plugins/%TOPIC%Dev</a></td>
  </tr>
</table>

**_Related Topics:_** [[TWikiPreferences]], [[TWikiPlugins]]

-- TWiki:Main/PeterThoeny - 03 Apr 2004
