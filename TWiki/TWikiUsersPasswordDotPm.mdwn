# <a name="Package &lt;code&gt;TWiki::Users::Password="></a> Package =TWiki::Users::Password

Base class of all password handlers. Default behaviour is no passwords, so anyone can be anyone they like.

The methods of this class should be overridded by subclasses that want to implement other password handling methods.

<div>
  <ul>
    <li><a href="#Package =TWiki::Users::Password="> Package TWiki::Users::Password</a><ul>
        <li><a href="#ClassMethod <strong>new</strong> ($session) ->"> ClassMethod new <tt>($session) -&gt; $object</tt></a></li>
        <li><a href="#ObjectMethod *finish*"> ObjectMethod finish <tt></tt></a></li>
        <li><a href="#ObjectMethod <strong>fetchPass</strong> ($login"> ObjectMethod fetchPass <tt>($login) -&gt; $passwordE</tt></a></li>
        <li><a href="#ObjectMethod <strong>checkPassword</strong> ($u"> ObjectMethod checkPassword <tt>($user,$passwordU) -&gt; $boolean</tt></a></li>
        <li><a href="#ObjectMethod <strong>deleteUser</strong> ($user"> ObjectMethod deleteUser <tt>($user) -&gt; $boolean</tt></a></li>
        <li><a href="#ObjectMethod <strong>passwd</strong> ($user,$ne"> ObjectMethod passwd <tt>($user,$newPassU,$oldPassU) -&gt; $boolean</tt></a></li>
        <li><a href="#encrypt( $user, $passwordU, $fre"> encrypt( $user, $passwordU, $fresh ) -&gt; $passwordE</a></li>
        <li><a href="#ObjectMethod <strong>error</strong> () -> $stri"> ObjectMethod error <tt>() -&gt; $string</tt></a></li>
        <li><a href="#ObjectMethod <strong>getEmails</strong> ($user)"> ObjectMethod getEmails <tt>($user) -&gt; @emails</tt></a></li>
        <li><a href="#ObjectMethod <strong>setEmails</strong> ($user,"> ObjectMethod setEmails <tt>($user,@emails)</tt></a></li>
      </ul>
    </li>
  </ul>
</div>

## <a name="ClassMethod &lt;strong&gt;new&lt;/strong&gt; ($session) - $"></a> [[ClassMethod]] **new** `($session) -> $object`

Constructs a new password handler of this type, referring to $session for any required TWiki services.

## <a name="ObjectMethod &lt;strong&gt;finish*"></a><a name="ObjectMethod *finish&lt;/strong&gt; "></a> [[ObjectMethod]] **finish** ``

Complete processing after the client's HTTP request has been responded to.

1. breaking circular references to allow garbage collection in persistent environments

## <a name="ObjectMethod &lt;strong&gt;fetchPass&lt;/strong&gt; ($login"></a> [[ObjectMethod]] **fetchPass** `($login) -> $passwordE`

Implements TWiki::Password

Returns encrypted password if succeeds. Returns 0 if login is invalid. Returns undef otherwise.

## <a name="ObjectMethod &lt;strong&gt;checkPassword&lt;/strong&gt; ($u"></a> [[ObjectMethod]] **checkPassword** `($user,$passwordU) -> $boolean`

Finds if the password is valid for the given login.

Returns 1 on success, undef on failure.

## <a name="ObjectMethod &lt;strong&gt;deleteUser&lt;/strong&gt; ($user"></a> [[ObjectMethod]] **deleteUser** `($user) -> $boolean`

Delete users entry.

Returns 1 on success, undef on failure.

## <a name="ObjectMethod &lt;strong&gt;passwd&lt;/strong&gt; ($user,$ne"></a> [[ObjectMethod]] **passwd** `($user,$newPassU,$oldPassU) -> $boolean`

If the $oldPassU is undef, it will try to add the user, failing if they are already there.

If the $oldPassU matches matches the login's password, then it will replace it with $newPassU.

If $oldPassU is not correct and not 1, will return 0.

If $oldPassU is 1, will force the change irrespective of the existing password, adding the user if necessary.

Otherwise returns 1 on success, undef on failure.

## <a name="encrypt( $user, $passwordU, $fre"></a> encrypt( $user, $passwordU, $fresh ) -&gt; $passwordE

Will return an encrypted password. Repeated calls to encrypt with the same user/passU will return the same passE.

However if the passU is changed, and subsequently changed _back_ to the old user/passU pair, then the old passE is no longer valid.

If $fresh is true, then a new password not based on any pre-existing salt will be used. Set this if you are generating a completely new password.

## <a name="ObjectMethod &lt;strong&gt;error&lt;/strong&gt; () - $strin"></a> [[ObjectMethod]] **error** `() -> $string`

Return any error raised by the last method call, or undef if the last method call succeeded.

## <a name="ObjectMethod &lt;strong&gt;getEmails&lt;/strong&gt; ($user)"></a> [[ObjectMethod]] **getEmails** `($user) -> @emails`

Fetch the email address(es) for the given username. Default behaviour is to look up the users' personal topic.

## <a name="ObjectMethod &lt;strong&gt;setEmails&lt;/strong&gt; ($user,"></a> [[ObjectMethod]] **setEmails** `($user,@emails)`

Set the email address(es) for the given username in the user topic.
